<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 常用流程及命令</title>
    <url>/2021/03/28/Git/Git%E5%B8%B8%E7%94%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用流程"><a href="#常用流程" class="headerlink" title="常用流程"></a>常用流程</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">&lt;版本库的网址&gt;	克隆</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">git</span> pull origin <span class="keyword">master</span>	<span class="title">获取远程数据，在本地会默认一个master</span>分支，不要在该分支上操作</span><br><span class="line"></span><br><span class="line">git branch test		创建本地新分支test</span><br><span class="line">git checkout test	切换到test分支</span><br><span class="line">git add .		添加更新</span><br><span class="line">git commit -m <span class="string">""</span>	提交代码到本地</span><br><span class="line">git pull origin <span class="keyword">master</span>	<span class="title">同步远程分支</span></span><br><span class="line"><span class="title">git</span> push origin test	提交本地分支数据到自己远程分支，第一次创建的时候，会自动在远程创建同名分支</span><br><span class="line"></span><br><span class="line">git checkout <span class="keyword">master</span>	<span class="title">切换到本地master</span></span><br><span class="line">git pull origin <span class="keyword">master</span>	<span class="title">获取远程master</span>最新数据</span><br><span class="line">git merge test		将test分支合并到当前分支（<span class="literal">master</span>）</span><br><span class="line">git push origin <span class="keyword">master</span>	<span class="title">提交到远程主分支</span></span><br><span class="line"><span class="title">git</span> checkout test	切换回本地自己分支</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="强制覆盖本地文件"><a href="#强制覆盖本地文件" class="headerlink" title="强制覆盖本地文件"></a>强制覆盖本地文件</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git fetch --all  </span><br><span class="line">git reset --hard origin/<span class="keyword">master</span>	<span class="title">（master</span> 可以更换为其他分支）</span><br><span class="line">git pull origin <span class="literal">master</span></span><br></pre></td></tr></table></figure>
<h2 id="回退到某个版本"><a href="#回退到某个版本" class="headerlink" title="回退到某个版本"></a>回退到某个版本</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard 版本号</span></span><br></pre></td></tr></table></figure>
<h2 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> remote <span class="keyword">add </span>origin git<span class="comment">@ github.com:yourname/yoursite.git  设置远程仓库地址</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>-u origin master  客户端首次提交</span><br></pre></td></tr></table></figure>
<h2 id="取消多次输入账号密码"><a href="#取消多次输入账号密码" class="headerlink" title="取消多次输入账号密码"></a>取消多次输入账号密码</h2><p>打开 .git 目录下的 config 文件，并修改url（注意 .git 是隐藏文件）<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">url = git@github<span class="selector-class">.com</span>:yourname/yourname<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span> （yourname 替换成自己的）</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人博客-基础配置</title>
    <url>/2021/03/28/Hexo/1.GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>在Github page平台上，使用Hexo搭建属于自己的静态博客</p>
</blockquote>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><ul>
<li>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a></li>
<li>安装：下载完成后双击安装，一路next，在Custom Setup这一步记得选 <code>Add to PATH</code> ，自动配置环境变量</li>
<li>查看版本：安装完成后，打开命令行窗口  <code>node -v</code> 查看版本<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2></li>
</ul>
<ul>
<li>下载：<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git官网</a></li>
<li>安装：一路next，在添加环境变量一步注意选择相对应系统</li>
<li>查看版本：安装完成后，打开命令行窗口  <code>git --version</code> 查看版本</li>
</ul>
<h2 id="搭建-Github"><a href="#搭建-Github" class="headerlink" title="搭建 Github"></a>搭建 Github</h2><ul>
<li>注册：<a href="https://github.com/" target="_blank" rel="noopener">Github官网</a></li>
<li>创建仓库：点击 “New repository”，新建一个版本库</li>
<li>输入仓库名： yourname.github.io (这个就是自己博客的域名，yourname 必须与注册用户名一致，否则就不能使用Github Pages服务)</li>
<li>启用GitHub Page：进入新仓库的 Settings，在Options项中找到GitHub Pages配置，选择初始主题并保存发布</li>
<li>配置Github账户信息：在命令行窗口输入以下命令（YourName 和 YourEail都替换成自己的，如果新用户没有添加邮箱，需要在个人设置中进行验证）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "YourName"</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email "YourEmail"</span><br></pre></td></tr></table></figure>
<h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><ul>
<li>生成公钥</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "Github的注册邮箱地址"</span><br></pre></td></tr></table></figure>
<ul>
<li>添加公钥到 Github<ul>
<li>一路Enter，待秘钥生成完毕，会得到两个文件 id_rsa 和 id_rsa.pub，并且在命令行返回的信息中可以找到文件的位置，如果找不见，可以在“我的电脑”全局搜索</li>
<li>打开 id_rsa.pub，复制所有内容</li>
<li>进入Github，右上角 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key</li>
<li>把公钥粘贴到 key 中，title 可以自定义，最后  Add SSH key</li>
<li>在命令行中验证是否添加成功：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><ul>
<li>新建文件夹，存放自己的博客（本文以 blog 文件夹示例）</li>
<li>安装Hexo： 命令行窗口进入blog文件夹</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>
<ul>
<li>验证是否安装正确</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<ul>
<li>安装依赖</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><ul>
<li>打开 _config.yml 文件，找到如下代码并修改</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yourname.github.io（yourname</span> <span class="string">替换为自己的）</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git（yourname</span> <span class="string">替换为自己的）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<ul>
<li>清除缓存</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<h2 id="本地运行-Hexo"><a href="#本地运行-Hexo" class="headerlink" title="本地运行 Hexo"></a>本地运行 Hexo</h2><ul>
<li>运行hexo（以后每次在本地运行只要输入该命令即可）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s -g</span><br></pre></td></tr></table></figure>
<ul>
<li>在浏览器输入 localhost:4000，惊艳的时刻到了~</li>
<li>停止运行<br>Ctrl + C 即可</li>
</ul>
<blockquote>
<p>本地所有配置完成后，下一步我们尝试发布博客</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人博客-发布更新</title>
    <url>/2021/03/28/Hexo/2.GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%8F%91%E5%B8%83%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<blockquote>
<p>在Github page平台上，使用Hexo搭建属于自己的静态博客</p>
</blockquote>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><ul>
<li><p>在 /source/_posts/ 文件夹下手动新建md文件，或者输入以下命令自动生成（位置：/source/_posts/）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new "hello"</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 hello.md 文件，进行简单编辑并保存</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello</span><br><span class="line">date: 2017-10-27 16:32:13</span><br><span class="line">---</span><br><span class="line">Hello，hexo！</span><br></pre></td></tr></table></figure>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><ul>
<li>安装hexo git插件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<ul>
<li>发布</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<ul>
<li>访问 yourname.github.io</li>
</ul>
<blockquote>
<p>博客搭起来了，不过，这个界面。。。还是换一个吧</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>gitignore文件不起作用</title>
    <url>/2021/03/28/Git/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote>
<p>git清除本地缓存（改变成untrack状态），然后再提交</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清空所有文件状态（注意有 . ）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm -r --cached .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者清空指定目录或文件状态（xxx为目录或者文件路径）-- 这个更实用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm -r --cached xxx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂存</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'update .gitignore'</span></span></span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</li>
<li>想要.gitignore起作用，必须要使这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件。</li>
<li>对于已经被staged文件，加入.gitignore文件时一定要先从staged移除，才可以忽略。</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 React Hook</title>
    <url>/2021/03/28/React/%E5%85%B3%E4%BA%8EReact%20Hook/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一些在函数组件中“钩入”React State和生命周期等特性的函数。</p>
<h2 id="为什么选用Hook"><a href="#为什么选用Hook" class="headerlink" title="为什么选用Hook"></a>为什么选用Hook</h2><p><strong>1、无需修改组件结构情况下复用状态逻辑</strong> </p>
<ul>
<li>类组件：复用状态逻辑很复杂，比如高阶组件、context、render props等，需要调整布局逻辑；而且如果层级过深，很容易形成“嵌套地狱”。</li>
<li>Hook：可以在不修改组件结构的情况下，提取复用状态逻辑。</li>
</ul>
<p><strong>2、使用Effect解决复杂的生命周期及函数处理</strong></p>
<ul>
<li>类组件：同一个生命周期中可能会有很多逻辑，比如在componentDidMount中会有请求数据、设置事件监听、定时器等，然后在componentWillUnmount中清除。完全不相关的逻辑组合在了同一个方法中，而相互关联的逻辑又被拆得很分散，非常难维护。</li>
<li>Hook：内置已处理生命周期，不需要手动维护，Effect Hook执行的是颗粒化的函数逻辑，可以拆分不同的函数，比如接口请求、设置订阅、操作Dom等是执行不同的方法，并不需要按照生命周期划分；同时支持回调处理，比如取消订阅或取消定时，可以在回调中执行，逻辑关联性更强。</li>
</ul>
<p><strong>3、删除class概念</strong></p>
<ul>
<li>类组件：需要理解并使用this，还需要区分类组件和函数组件；class不能很好的压缩，热重载不稳定。</li>
<li>Hook：不需要使用this，更多的是函数方案。</li>
</ul>
<h2 id="常用Hook"><a href="#常用Hook" class="headerlink" title="常用Hook"></a>常用Hook</h2><h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><ul>
<li>可以在函数组件中使用 state</li>
<li>不同于class组件的setState，useState不会自动合并更新对象，需要使用更新函数setXxx计算得出</li>
</ul>
<h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><ul>
<li>合并<code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code>生命周期</li>
<li>赋值给 useEffect 的函数，如数据获取、设置订阅、更新Dom等，会在组件渲染之后再执行</li>
<li>useEffect 函数中可以返回一个清除函数，会在组件卸载之前执行，比如清除订阅、清除定时等</li>
<li>如果只想运行一次effect，可以传空数组[]作为第二个参数</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>useContext</li>
<li>useReducer</li>
<li>useCallback</li>
<li>useMemo</li>
<li>useRef</li>
<li>useImperativeHandle</li>
<li>useLayoutEffect</li>
<li>useDebugValue</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>只能在函数最外层调用，不能在循环、条件判断或者子函数中调用，需要保证多次渲染过程中调用的Hook顺序一致，这样React就可以正确地将内部state和对应的hook关联</li>
<li>不能在class组件中使用</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>更多详细 React Hook：<a href="https://react.docschina.org/docs/hooks-intro.html" target="_blank" rel="noopener">https://react.docschina.org/docs/hooks-intro.html</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人博客-主题配置</title>
    <url>/2021/03/28/Hexo/3.GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>在Github page平台上，使用Hexo搭建属于自己的静态博客</p>
</blockquote>
<p>Hexo初始化之后默认的主题是 landscape，可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 主题</a> 找自己喜欢的，我选的是  Next 主题，简单优雅。</p>
<h2 id="安装-Next"><a href="#安装-Next" class="headerlink" title="安装 Next"></a>安装 Next</h2><p>下载并拷贝主题文件到站点目录的 themes 目录下，然后修改配置文件</p>
<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>打开 <strong>站点配置文件</strong>（根目录下的 _config.yml 文件），修改（theme 的值与下载的主题文件夹名字相同即可，此处为了方便直接改用 next）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h2 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h2><p>启用完成后，首先清除缓存（对于之后的设置，如果没有效果，建议先执行该命令再预览）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>开启调试模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<p>访问 localhost:4000，检查站点是否正确运行</p>
<h2 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h2><p>通过切换 Scheme，可以选择不同的版式，默认是 Muse</p>
<p>打开 <strong>主题配置文件</strong> （themes/next/_config.yml），搜索 scheme 关键字，选择需要启用的，删除 #，并保证其它都有 # 即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h2 id="设置基本信息"><a href="#设置基本信息" class="headerlink" title="设置基本信息"></a>设置基本信息</h2><p>编辑 <strong>站点配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">博客名</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">博客描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">自己的大名啦</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以将 language 设置成所需要的语言（如简体中文）。</p>
</blockquote>
<h2 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h2><ul>
<li>设定菜单内容，编辑 <strong>主题配置文件</strong>，对应的字段是 menu</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<ul>
<li>设置菜单的显示文本，以简体中文为例，若需要更改菜单项 archives，编辑<br>themes/next/languages/zh-Hans.yml ：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">记录</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益404</span></span><br></pre></td></tr></table></figure>
<ul>
<li>设定菜单项的图标，编辑 <strong>主题配置文件</strong>，对应的字段是 menu_icons<br>enable 可用于控制是否显示图标</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu_icons:  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">heartbeat</span></span><br></pre></td></tr></table></figure>
<h2 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h2><p>修改 <strong>主题配置文件</strong> 中的 sidebar 字段来控制侧栏的行为</p>
<ul>
<li>设置侧栏的位置，修改 sidebar.position 的值</li>
<li>设置侧栏显示的时机，修改 sidebar.display 的值</li>
</ul>
<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>编辑 <strong>站点配置文件</strong>，新增字段 avatar，值可以是网络地址或者站点内的地址</p>
<ul>
<li>如果是网络图片，可以为：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">http://example.com/avtar.png</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果是本地图片，需要将头像放置在 themes/next/source/uploads/ （若不存在uploads目录，需要新建）<br>配置为：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/uploads/avatar.png</span></span><br></pre></td></tr></table></figure>
<p>或者放置在 themes/next/source/images/ 目录下<br>配置为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.png</span></span><br></pre></td></tr></table></figure>
<p>整个界面已经清爽很多，更多个性化设置就得自己探索咯…</p>
<blockquote>
<p>关于 next 主题的更多配置，可以访问 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令-文件与目录操作</title>
    <url>/2021/03/28/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h2><blockquote>
<p>print working directory：查看当前目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h2><blockquote>
<p>change directory：切换目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换目录</span></span><br><span class="line">cd home</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一级目录</span></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到根目录</span></span><br><span class="line">cd /</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到当前用户目录</span></span><br><span class="line">cd</span><br><span class="line"><span class="meta">#</span><span class="bash"> or（~代表当前用户主目录）</span></span><br><span class="line">cd ~</span><br></pre></td></tr></table></figure>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h2><blockquote>
<p>list：查看当前目录中的文件列表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录中的文件夹和文件</span></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个目录中的文件夹和文件，如tmp</span></span><br><span class="line">ls tmp</span><br></pre></td></tr></table></figure>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h2><blockquote>
<p>make directory：创建目录或文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建单个目录</span></span><br><span class="line">mkdir dir0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个目录中的文件夹和文件，如tmp</span></span><br><span class="line">ls tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在某个目录下创建</span></span><br><span class="line">mkdir /tmp/tutorial</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建多个目录</span></span><br><span class="line">mkdir dir1 dir2 dir3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建逐层目录</span></span><br><span class="line">mkdir -p dir4/dir5/dir6</span><br></pre></td></tr></table></figure>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h2><blockquote>
<p>echo：打印</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印到控制台</span></span><br><span class="line">echo "This is test"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印到某个文件</span></span><br><span class="line">echo "test1" &gt; test_1.txt</span><br></pre></td></tr></table></figure>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h2><blockquote>
<p>concatenate：链接；查看文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看单个文件</span></span><br><span class="line">cat test_1.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看多个文件</span></span><br><span class="line">cat test_1.txt test_2.txt test_3.txt</span><br><span class="line">cat test_?.txt</span><br><span class="line">cat test_*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多个文件内容整合到一个文件</span></span><br><span class="line">cat t* &gt; combined.txt</span><br><span class="line">cat combined.txt</span><br></pre></td></tr></table></figure>
<p>注意：<br>重复执行命令会覆盖已经存在的文件，如果需要追加内容而不是替换内容，可用多个”&gt;&gt;”：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 追加整个内容</span></span><br><span class="line">cat t* &gt;&gt; combined.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再追加一行</span></span><br><span class="line">echo "Add a line" &gt;&gt; combined.txt</span><br><span class="line"></span><br><span class="line">cat combined.txt</span><br></pre></td></tr></table></figure>
<h2 id="less"><a href="#less" class="headerlink" title="less"></a><code>less</code></h2><blockquote>
<p>less：文件内容过多时，以分页方式查看</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看单个文件</span></span><br><span class="line">less combined.txt</span><br></pre></td></tr></table></figure>
<h2 id="q"><a href="#q" class="headerlink" title="q"></a><code>q</code></h2><blockquote>
<p>quit：退出less查看模式</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">q</span><br></pre></td></tr></table></figure>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h2><blockquote>
<p>move：移动文件或目录；修改文件名或目录名</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移动文件到某个目录</span></span><br><span class="line">mv combined.txt dir1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> . 代表当前目录</span></span><br><span class="line">mv dir1/combined.txt .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动多个文件到一个目录，最后一个为目标目录，如把以下几个文件及文件夹dir3移动到dir2</span></span><br><span class="line">mv combined.txt test_* dir3 dir2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件名、目录名</span></span><br><span class="line">mv test_1.txt test1.txt</span><br><span class="line">mv "folder 1" folder_1</span><br></pre></td></tr></table></figure>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h2><blockquote>
<p>copy：复制文件或目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 复制文件</span></span><br><span class="line">cp combined.txt combined_backup.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制文件到其他目录</span></span><br><span class="line">cp combined.txt dir1</span><br></pre></td></tr></table></figure>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h2><blockquote>
<p>remove：移除文件或目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除单个文件</span></span><br><span class="line">rm combined_backup.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个目录中的文件</span></span><br><span class="line">rm dir4/dir5/dir6/combined.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除多个文件</span></span><br><span class="line">rm combined_backup.txt dir4/dir5/dir6/combined.txt</span><br><span class="line">rm test_*.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除某个目录及目录中所有文件</span></span><br><span class="line">rm -r dir4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 带提示删除（Y or N）</span></span><br><span class="line">rm -i combined.txt</span><br></pre></td></tr></table></figure>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h2><blockquote>
<p>remove directory：删除目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除目录（注意只会删除空目录）</span></span><br><span class="line">rmdir folder_1</span><br><span class="line">rmdir dir*</span><br></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title="|"></a><code>|</code></h2><blockquote>
<p>pipe 管道，将一个命令传递到另一个命令</p>
</blockquote>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a><code>wc</code></h2><blockquote>
<p>count：统计数量</p>
</blockquote>
<ul>
<li><code>-l</code>：line 行数或文件数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看文件行数</span></span><br><span class="line">wc -l combined.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看home目录文件数</span></span><br><span class="line">ls ~ | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以分页形式打开etc目录</span></span><br><span class="line">ls /etc | less</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>man</code>：manual 查看操作手册</li>
<li><code>uniq</code>：unique 在文件中输出不重复的行</li>
<li><code>sort</code>：排序</li>
<li><code>reset</code>：清空当前窗口内容</li>
<li><code>whoami</code>：查看当前用户名</li>
<li><code>sudo</code>：超管身份运行</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>零脚手架搭建 React</title>
    <url>/2021/03/28/React/%E9%9B%B6%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%20React/</url>
    <content><![CDATA[<p><a href="https://github.com/liujinge/react-todo" target="_blank" rel="noopener">react-todo</a></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>在搭建过程中，可以使用 npm 构建依赖。因此首先需要 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js</a>，直接下载安装即可。</p>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>新建一个项目，结构如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616915504696-e04c70d7-c752-453f-9f86-025095bdb6f1.png" alt="项目结构-初始化.png"></p>
<p>app: 开发目录</p>
<ul>
<li>components 用来存放组件<ul>
<li>Hello.js 第一个组件文件</li>
</ul>
</li>
<li>main.js 整个项目的入口文件</li>
</ul>
<p>build: 打包后的目录</p>
<ul>
<li>index.html 是最终要展示的页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>bundle.js：打包后的js文件</li>
</ul>
<h2 id="创建-package-json"><a href="#创建-package-json" class="headerlink" title="创建 package.json"></a>创建 package.json</h2><p>命令行窗口进入项目根目录，执行以下命令生成  package.json 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>执行过程中需要输入基本信息，也可以一路默认回车</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616915657448-020258cc-7d5a-4a5d-86ec-bd4841750960.png" alt="init.png"></p>
<p>完成后即可在根目录中看到</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save react</span><br><span class="line"></span><br><span class="line">npm install --save react-dom  处理virtual DOM</span><br><span class="line"></span><br><span class="line">npm install --save-dev webpack  模块打包工具</span><br><span class="line"></span><br><span class="line">npm install --save-dev webpack-dev-server  支持热加载</span><br><span class="line"></span><br><span class="line">npm install --save-dev babel-core babel-loader  babel-preset-es2015 babel-preset-react  安装babel相关，编译js</span><br></pre></td></tr></table></figure>
<h2 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h2><p>在根目录下新增 webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//引入Webpack模块供我们调用，这里只能使用ES5语法，使用ES6语法会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//__dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">//注意这里是exports不是export</span></span><br><span class="line">	devtool: <span class="string">'eval-source-map'</span>, <span class="comment">//生成Source Maps,这里选择eval-source-map</span></span><br><span class="line">	entry: [<span class="string">'webpack/hot/dev-server'</span>, __dirname + <span class="string">'/app/main.js'</span>], <span class="comment">//唯一入口文件,__dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录</span></span><br><span class="line">	output: &#123; <span class="comment">//输出目录</span></span><br><span class="line">		path: __dirname + <span class="string">"/build"</span>, <span class="comment">//打包后的js文件存放的地方</span></span><br><span class="line">		filename: <span class="string">"bundle.js"</span> <span class="comment">//打包后的js文件名</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	<span class="built_in">module</span>: &#123;</span><br><span class="line">		<span class="comment">//loaders加载器</span></span><br><span class="line">		loaders: [&#123;</span><br><span class="line">				test: <span class="regexp">/\.(js|jsx)$/</span>, <span class="comment">//一个匹配loaders所处理的文件的拓展名的正则表达式，这里用来匹配js和jsx文件（必须）</span></span><br><span class="line">				exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//屏蔽不需要处理的文件（文件夹）（可选）</span></span><br><span class="line">				loader: <span class="string">'babel-loader'</span> <span class="comment">//loader的名称（必须）</span></span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	plugins: [</span><br><span class="line">		<span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">//热模块替换插件</span></span><br><span class="line">	],</span><br><span class="line"></span><br><span class="line">	<span class="comment">//webpack-dev-server配置</span></span><br><span class="line">	devServer: &#123;</span><br><span class="line">		contentBase: <span class="string">'./build'</span>, <span class="comment">//默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录</span></span><br><span class="line">		historyApiFallback: <span class="literal">true</span>, <span class="comment">//在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</span></span><br><span class="line">		inline: <span class="literal">true</span>, <span class="comment">//设置为true，当源文件改变时会自动刷新页面</span></span><br><span class="line">		port: <span class="number">9000</span>, <span class="comment">//设置默认监听端口，如果省略，默认为"8080"</span></span><br><span class="line">		open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h2><p>修改 package.json，在 <code>scripts</code> 添加以下代码，实现热加载:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack",</span><br><span class="line">  "dev": "webpack-dev-server"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置-Babel"><a href="#配置-Babel" class="headerlink" title="配置 Babel"></a>配置 Babel</h2><p>Babel 可以在 <code>webpack.config.js</code> 中配置，但由于其配置项比较复杂，因此可以放在一个单独的文件中，webpack会自动调用.babelrc里的babel配置选项。<br>在项目根目录下新建 <code>.babelrc</code> 文件，注意该文件名只有后缀。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"es2015"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编辑-React组件并引入"><a href="#编辑-React组件并引入" class="headerlink" title="编辑 React组件并引入"></a>编辑 React组件并引入</h2><p>编辑 <code>app/components/Hello.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	render() &#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt; Hello React! &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">		)</span></span><br><span class="line"><span class="regexp">	&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Hello;</span></span><br></pre></td></tr></table></figure>
<p>编辑 <code>app/main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.js'</span>;</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">    &lt;Hello /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>Hello React！</p>
<hr>
<p>参考：<br><a href="http://www.jianshu.com/p/4df92c335617" target="_blank" rel="noopener">从零开始，教你用Webpack构建React基础工程</a><br><a href="http://www.jianshu.com/p/324fd1c124ad" target="_blank" rel="noopener">从零开始搭建一个react项目</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli 快速构建 vue 项目</title>
    <url>/2021/03/28/Vue/vue-cli%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h2><p>下载并安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>安装完成之后，在命令行输入 <code>node -v</code>，如果出现相应版本号，则证明安装成功</p>
<h2 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --<span class="keyword">registry</span>=<span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h2 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">cnpm install -g vue-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，检验是否安装成功</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">vue -V <span class="comment">(在此注意V为大写)</span></span><br></pre></td></tr></table></figure>
<h2 id="构建-vue-项目"><a href="#构建-vue-项目" class="headerlink" title="构建 vue 项目"></a>构建 vue 项目</h2><p>选定要存放 vue 项目的位置，在命令行窗口进入该目录，初始化项目（demo 是项目的名称）</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vue init webpack demo</span></span><br></pre></td></tr></table></figure>
<p>运行过程中，会提示输入基本信息，如项目名称，描述，作者等，可以自定义或者跳过</p>
<p>注意：<br>1、当提示 &gt; <code>Use ESLint to lint your code?</code> 时，指是否使用 ESLint 规范代码，由于 ESLint 较为严格，一个空格错误都将报错，如果想避免不必要的麻烦可以选择No<br>2、后两项为单元测试，可以选择 No</p>
<p>结束之后，会自动生成 demo 文件夹</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616914976477-896692d9-8d74-4be4-b819-69ed9fac6b21.png" alt="初始文件结构.png"></p>
<p>项目的结构框架已经完成，但项目需要依赖的资源还没有安装</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>打开 demo 根目录下的 package.json</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616915049399-d1fb4515-f388-4f76-b8e1-3960d7d7fbed.png" alt="项目依赖.png"></p>
<p>命令行窗口进入 demo 文件夹，安装项目所需的依赖</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>完成之后，会生成 node_modules 文件夹，这就是我们项目需要的依赖包资源</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616915069450-b12e7d8c-ee36-41d6-95f8-2943e56e0ca5.png" alt="安装依赖后文件结构.png"></p>
<p>依赖包安装成功之后，我们试着运行一下项目</p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>在项目命令行窗口，执行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> dev</span></span><br></pre></td></tr></table></figure>
<p>等待运行完成，会自动打开浏览器 localhost:8080（如果没有自动打开，可以先手动输入）<br>如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，打开 config &gt; index.js，修改端口号（建议将端口号设为不常用端口）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616915091640-98f69c2e-f89d-46ed-9911-b2285181e5c9.png" alt="修改端口.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616915193656-6138f741-1f0a-4bdf-8cd0-d280c9ee13ee.png" alt="运行成功.png"></p>
<p>如果看到这个页面，恭喜，第一个 vue 项目运行成功！</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人博客-标签分类</title>
    <url>/2021/03/28/Hexo/4.GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>在Github page平台上，使用Hexo搭建属于自己的静态博客</p>
</blockquote>
<h2 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h2><p>在前面，我们修改过 next 主题下 _config.yml 文件中的menu选项，添加了标签选项，但点击发现是个未找到的页面，慌不？</p>
<ul>
<li>新建标签页面<br>命令行进入 blog 文件夹，输入以下命令，完成后会看到 blog/source 目录下新建了 tags 文件夹，以及其下的 index.md 文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<ul>
<li>设置页面类型<br>打开新生成的 index.md 文件，添加 <code>type: &quot;tags&quot;</code>，如下</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-10-28 16:56:53</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li>设置具体文章的标签<br>要为某一篇文章添加标签，只需要在 blog/source/_posts 找到该文章，然后添加 tags，如 hello.md（如果想添加多个标签 <code>tags: [标签一，标签二]</code> 即可）</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello</span><br><span class="line">date: 2017-10-27 16:32:13</span><br><span class="line">tags: 标签一</span><br><span class="line">categories: </span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>刷新页面再看一下~</p>
<h2 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h2><p>这下添加分类就简单了，步骤类似</p>
<ul>
<li>新建分类页面</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<ul>
<li>设置页面类型<br>打开 blog/source/categories 下的 index.md 文件，添加 <code>type: &quot;categories&quot;</code>，如下</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2017-10-27 16:56:07</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li>设置具体文章的分类<br>在 blog/source/_posts 找到该文章，然后添加 categories，如 hello.md</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello</span><br><span class="line">date: 2017-10-27 16:32:13</span><br><span class="line">tags: 标签一</span><br><span class="line">categories: 分类一</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="添加关于我"><a href="#添加关于我" class="headerlink" title="添加关于我"></a>添加关于我</h2><ul>
<li>新建关于我</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<ul>
<li>修改 blog/source/about/index.md</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2017-10-28 16:57:17</span><br><span class="line">---</span><br><span class="line"><span class="section">## 关于我</span></span><br><span class="line">Stay Hungry. Stay Foolish.</span><br></pre></td></tr></table></figure>
<hr>
<p>开启博客之旅吧…</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>dotenv配置与使用</title>
    <url>/2021/03/28/dotenv/dotenv%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>将环境变量从 .env 文件加载到中 process.env</p>
<h2 id="项目中的作用"><a href="#项目中的作用" class="headerlink" title="项目中的作用"></a>项目中的作用</h2><ul>
<li>统一管理各个环境下的全局变量</li>
<li>方便切换环境</li>
</ul>
<h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> with npm </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install dotenv --save-dev</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> or with Yarn </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add dotenv -D</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-env-文件"><a href="#配置-env-文件" class="headerlink" title="配置 .env 文件"></a>配置 .env 文件</h3><p>示例如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DEV 环境变量配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境名</span></span><br><span class="line"><span class="attr">ENV</span>=dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接口域名</span></span><br><span class="line"><span class="attr">API_HOST</span>=https://api.dev.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点域名</span></span><br><span class="line"><span class="attr">SITE_HOST</span>=https://dev.com</span><br></pre></td></tr></table></figure>
<h3 id="引入dotenv"><a href="#引入dotenv" class="headerlink" title="引入dotenv"></a>引入dotenv</h3><p>在 webpack/config.js 中引入dotenv</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 dotenv 设置环境变量，注意 dotenv 调用应该尽量靠前，在使用 process.env 之前调用</span></span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>可以校验文件是否存在，以及读取后自定义操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> envConfig = dotenv.config(&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../.env'</span>), <span class="comment">// 配置文件路径</span></span><br><span class="line">    encoding: <span class="string">'utf8'</span>, <span class="comment">// 编码方式，默认utf8</span></span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 是否开启debug，默认false</span></span><br><span class="line">&#125;).parsed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!envConfig) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'配置文件不存在'</span>);</span><br><span class="line">    <span class="comment">// 退出程序</span></span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区分环境"><a href="#区分环境" class="headerlink" title="区分环境"></a>区分环境</h3><p>如果需要区分环境，可以配置不同环境的 .env 文件，然后在 webpack/config.js 中根据环境读取对应配置文件。示例如下（此处通过启动命令来区分环境，具体区分方式可根据业务自行配置）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">		"start:dev": "cross-env CURRENT_ENV=dev webpack-dev-server --config webpack/dev.js --progress --mode development",</span><br><span class="line">		"start:test": "cross-env CURRENT_ENV=test webpack-dev-server --config webpack/dev.js --progress --mode development",</span><br><span class="line">		"start:prod": "cross-env CURRENT_ENV=prod webpack-dev-server --config webpack/dev.js --progress --mode development",</span><br><span class="line">		"build:dev": "cross-env CURRENT_ENV=dev webpack --config webpack/build.js --mode production",</span><br><span class="line">		"build:test": "cross-env CURRENT_ENV=test webpack --config webpack/build.js --mode production",</span><br><span class="line">		"build:prod": "cross-env CURRENT_ENV=prod webpack --config webpack/build.js --mode production"</span><br><span class="line">	&#125;,</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>env文件目录参考：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line"><span class="string">|-- webpack</span></span><br><span class="line">  <span class="string">|-- env</span></span><br><span class="line">    <span class="string">|-- .env.dev</span></span><br><span class="line">    <span class="string">|-- .env.test</span></span><br><span class="line">    <span class="string">|-- .env.prod</span></span><br><span class="line">  <span class="string">|-- build.js</span></span><br><span class="line">  <span class="string">|-- config.js</span></span><br><span class="line">  <span class="string">|-- dev.js</span></span><br></pre></td></tr></table></figure>
<p>webpack/config.js 配置修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/config.js</span></span><br><span class="line"><span class="comment">// 环境变量配置</span></span><br><span class="line"><span class="keyword">const</span> envConfigPath = &#123;</span><br><span class="line">    dev: path.resolve(__dirname, <span class="string">'./env/.env.dev'</span>), <span class="comment">// 开发环境配置</span></span><br><span class="line">    test: path.resolve(__dirname, <span class="string">'./env/.env.test'</span>), <span class="comment">// 测试环境配置</span></span><br><span class="line">    prod: path.resolve(__dirname, <span class="string">'./env/.env.prod'</span>), <span class="comment">// 正式环境配置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envConfig = dotenv.config(&#123;</span><br><span class="line">    path: envConfigPath[process.env.CURRENT_ENV], <span class="comment">// 配置文件路径</span></span><br><span class="line">    ...</span><br><span class="line">&#125;).parsed;</span><br></pre></td></tr></table></figure>
<h3 id="包装-dotenv-和-webpack-DefinePlugin"><a href="#包装-dotenv-和-webpack-DefinePlugin" class="headerlink" title="包装 dotenv 和 webpack.DefinePlugin"></a>包装 dotenv 和 webpack.DefinePlugin</h3><p>.env文件配置好后，还需要将变量同步为全局环境变量，这样才能在业务场景中使用。这里可以借助一下 dotenv-webpack 插件。</p>
<ul>
<li>安装webpack插件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> with npm </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install dotenv-webpack --save-dev</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> or with Yarn </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add dotenv-webpack -D</span></span><br></pre></td></tr></table></figure>
<ul>
<li>webpack/config.js 中引入 dotenv-webpack</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DotenvWebpack = <span class="built_in">require</span>(<span class="string">'dotenv-webpack'</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>webpack/config.js 中添加插件，读取env配置文件， 并包装成全局环境变量，功能类似于 webpack.DefinePlugin</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> DotenvWebpack(&#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../.env'</span>), <span class="comment">// 配置文件路径</span></span><br><span class="line">        <span class="comment">// path: envConfigPath[process.env.CURRENT_ENV], // 根据环境配置文件路径</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同时可以配置其他的环境变量</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">        <span class="string">'process.env.CURRENT_NAME'</span>: <span class="built_in">JSON</span>.stringify(currentName),</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<hr>
<p>至此，所有的配置都已OK，可以直接在业务中使用了 (￣▽￣)／</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>业务逻辑中直接可以通过 <code>process.env.${变量名}</code> 使用全局环境变量</li>
<li>如果需要切环境，直接执行对应环境的命令即可</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li>dotenv：<a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noopener">https://www.npmjs.com/package/dotenv</a></li>
<li>dotenv-webpack：<a href="https://www.npmjs.com/package/dotenv-webpack" target="_blank" rel="noopener">https://www.npmjs.com/package/dotenv-webpack</a></li>
</ul>
]]></content>
      <categories>
        <category>dotenv</category>
      </categories>
      <tags>
        <tag>dotenv</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序-webView</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F-webView/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html" target="_blank" rel="noopener">官方</a>介绍：承载网页的容器。会自动铺满整个小程序页面，个人类型的小程序暂不支持使用。</p>
</blockquote>
<p>简单理解：web-view 是一个和当前页面一样大小的容器，容器中展示的是 src 引用的网页内容。<br>类似于 html 中的 iframe ，不同的是 iframe 可以自定义大小、边框等样式，而 web-view 会自动铺满整个页面，并覆盖其他组件。</p>
<h2 id="优劣势"><a href="#优劣势" class="headerlink" title="优劣势"></a>优劣势</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>小程序中不支持 html 标签，会限制页面表现形式（比如公众号文章在小程序中展示不太理想）。使用 web-view，可以优化这类型页面的展示。</li>
<li>降低开发成本，一套 H5 可以运行于多个环境内（比如公众号、小程序、以及未来的其他应用场景）</li>
<li><p>热更新更加方便，减少因小程序审核周期长而带来的影响</p>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3></li>
<li><p>引用的网页中资源如果未压缩，会增大消耗流量</p>
</li>
<li>加载时不如原生小程序流畅</li>
<li><p>普通网页中信息复杂，小程序开放嵌入网页功能，可能会出现鱼龙混杂情况</p>
<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3></li>
<li><p>个人类型的小程序暂不支持使用</p>
</li>
<li>webview 可打开关联的公众号的文章，其它网页需配置业务域名。域名必须为 经过ICP备案的 https 协议，而且需要从配置后台下载校验文件放在域名根目录下，验证通过后才能配置成功。网页中的 iframe 也要在域名白名单中。一个小程序最多可添加20个域名。</li>
<li>一个页面只能放置一个 web-view，且会覆盖其他的组件铺满屏幕</li>
<li>目前支持的 jssdk 接口还比较少</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>登录<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">小程序管理后台</a>，在“开发-开发设置”中配置业务域名</li>
<li>如果是第三方开发小程序，需要登录<a href="https://open.weixin.qq.com/cgi-bin/index?t=home/index&amp;lang=zh_CN" target="_blank" rel="noopener">微信开放平台</a>，在“管理中心-第三方平台”中配置</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在小程序中引入网页地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小程序 wxml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- src为域名白名单中的页面路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">"https://mp.weixin.qq.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><h3 id="由小程序到网页"><a href="#由小程序到网页" class="headerlink" title="由小程序到网页"></a>由小程序到网页</h3><ul>
<li>小程序通过 url 拼接参数，页面解析 url 获取参数信息</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小程序 wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">"https://mp.weixin.qq.com?id=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="由网页到小程序"><a href="#由网页到小程序" class="headerlink" title="由网页到小程序"></a>由网页到小程序</h3><ul>
<li>网页通过 <code>wx.miniProgram.navigateTo</code> 、 <code>wx.miniProgram.redirectTo</code> 等方法跳转小程序（支持的接口参考官方文档），参数可拼接在 url 后，小程序页面在 <code>onLoad</code> 方法中获取</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// H5 js</span></span><br><span class="line"><span class="comment">// 跳转小程序页面</span></span><br><span class="line">wx.miniProgram.navigateTo(&#123;</span><br><span class="line">    url:<span class="string">'/pages/detail/detail?id=1'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fail'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小程序 js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小程序页面--监听页面加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options) <span class="comment">// &#123; id: 1 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>网页通过  <code>wx.miniProgram.postMessage</code>  向小程序发送消息，在特定时机（小程序后退、组件销毁、分享）触发组件的 message 事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// H5 js</span></span><br><span class="line"><span class="comment">// 页面向小程序发送消息</span></span><br><span class="line">wx.miniProgram.postMessage(&#123; <span class="attr">data</span>: &#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125; &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小程序 page.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;webViewUrl&#125;&#125;"</span> <span class="attr">bindmessage</span>=<span class="string">"getMessage"</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小程序 page.js</span></span><br><span class="line">getMessage: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// e.detail.data 是多次 postMessage 的参数组成的数组</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.detail) <span class="comment">// &#123; data: [&#123;foo: 'bar'&#125;] &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li>小程序清除 web-view 缓存，可在 src 添加版本号或者随机参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小程序 page.js</span></span><br><span class="line"><span class="comment">// 添加时间戳</span></span><br><span class="line"><span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    webViewUrl: <span class="string">'https://mp.weixin.qq.com?id=1&amp;amp;timestamp='</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>小程序中刷新网页，可更新 src，但如果直接修改，会增加浏览历史，可以采用条件渲染</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小程序 page.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;webViewUrl&#125;&#125;"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;webViewUrl&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小程序 page.js</span></span><br><span class="line"><span class="comment">// 首先销毁webView，再重新赋值更新</span></span><br><span class="line"><span class="keyword">const</span> tmpUrl = <span class="keyword">this</span>.data.webViewUrl;</span><br><span class="line"><span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    webViewUrl: <span class="string">''</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// setData异步执行，否则会提示一个页面只能嵌入一个web-view</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        webViewUrl: tmpUrl</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>在链接中带有中文字符时，在 iOS 中会有打开白屏的问题，需要 <code>encodeURIComponent</code></li>
<li>网页中共享小程序的登录态，可以在 url 中传递 cookie、token 等</li>
<li>改变 web-view 的标题，可以在网页中修改 <code>document.title</code></li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序-数据分析自动埋点思路</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%87%AA%E5%8A%A8%E5%9F%8B%E7%82%B9%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前开源的数据埋点，大多都采用的是手动埋点。<br>比如腾讯移动分析MTA，如果想记录埋点信息，只需要调用api即可完成数据上报</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">submit() &#123;</span><br><span class="line">   ...业务代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   mta.Event.stat("submit", &#123;"params": &#123;&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看似很简单的一个埋点示例，但如果真正运用到项目中时，却会有以下问题：</p>
<ul>
<li>埋点需要收集的数据可能很多，复杂的埋点代码插入到业务代码，代码会被严重污染，并且影响代码的阅读体验</li>
<li>埋点代码散落在多个地方，不方便管理</li>
<li>产品可能会经常变更埋点信息，如果重复修改，则会很繁琐</li>
</ul>
<h2 id="自动埋点"><a href="#自动埋点" class="headerlink" title="自动埋点"></a>自动埋点</h2><p>可以通过“页面函数埋点”和“页面元素埋点”两种方式来实现</p>
<h3 id="页面函数埋点"><a href="#页面函数埋点" class="headerlink" title="页面函数埋点"></a>页面函数埋点</h3><blockquote>
<p>实现思路：监听函数调用 –&gt; 读取埋点配置 –&gt; 上报数据</p>
</blockquote>
<p>1、对页面原函数或者自定义函数进行包装，插入埋点代码，当函数调用时则执行上报方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rewritePage() &#123;</span><br><span class="line">    <span class="keyword">const</span> originPage = Page;</span><br><span class="line">    Page = <span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(page).forEach(<span class="function">(<span class="params">methodName</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 执行埋点上报逻辑</span></span><br><span class="line">            <span class="keyword">typeof</span> page[methodName] === <span class="string">'function'</span> &amp;amp;&amp;amp; <span class="keyword">this</span>.recordPageFn(page, methodName);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 执行原Page对象</span></span><br><span class="line">        <span class="keyword">return</span> originPage(page);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、配置表声明埋点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tracks = &#123;</span><br><span class="line">    path: <span class="string">'pages/home/home'</span>,</span><br><span class="line">    methodTracks: [</span><br><span class="line">        &#123;</span><br><span class="line">            method: <span class="string">'showContact'</span>,  <span class="comment">// 声明需要监听的函数名，和页面原函数名一一对应</span></span><br><span class="line">            ... <span class="comment">// 其余需要的配置，可对应数据分析平台需要参数</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="页面元素埋点"><a href="#页面元素埋点" class="headerlink" title="页面元素埋点"></a>页面元素埋点</h3><blockquote>
<p>实现思路：监听用户点击 –&gt; 读取埋点配置 –&gt; 上报数据</p>
</blockquote>
<p>1、 监听用户点击</p>
<p>小程序中没有Dom事件监听，我们可以通过事件冒泡，在外层元素自定义 elementTracker 方法中捕获</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 小程序监听页面点击，用户的点击行为都会执行elementTracker方法</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">catchtap</span>=<span class="string">"elementTracker"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"more"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、判断点击元素是否在监听元素范围中</p>
<p>假设要判断是否点击了“更多”按钮，可以获取  <code>id=&quot;more&quot;</code>  元素的长宽、定位和点击位置坐标，判断是否出现重叠</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断点击是否落在目标元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>clickInfo 用户点击坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>boundingClientRect 目标元素信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>scrollOffset 页面位置信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isClickTrackArea = <span class="function"><span class="keyword">function</span> (<span class="params">clickInfo, boundingClientRect, scrollOffset</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!boundingClientRect) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = clickInfo.detail; <span class="comment">// 点击的x y坐标</span></span><br><span class="line">    <span class="keyword">const</span> &#123; left, right, top, height &#125; = boundingClientRect;</span><br><span class="line">    <span class="keyword">const</span> &#123; scrollTop &#125; = scrollOffset;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; x &amp;amp;&amp;amp; x &lt; right &amp;amp;&amp;amp; scrollTop + top &lt; y &amp;amp;&amp;amp; y &lt; scrollTop + top + height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3、 配置表声明埋点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tracks = &#123;</span><br><span class="line">    path: <span class="string">'pages/home/home'</span>,</span><br><span class="line">    elementTracks: [</span><br><span class="line">        &#123;</span><br><span class="line">            element: <span class="string">'#more'</span>,  <span class="comment">// 声明需要监听的元素</span></span><br><span class="line">            ... <span class="comment">// 其余需要的配置，可对应数据分析平台需要参数</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1、在小程序项目中引入包，目录可参考</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">|-- libs</span><br><span class="line">|   |-- tracker</span><br><span class="line">|       |-- wrapper.js</span><br><span class="line">|       |-- helper.js</span><br><span class="line">|       |-- index.js</span><br></pre></td></tr></table></figure>
<p>2、app.js文件引入资源</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入数据分析自动埋点</span></span><br><span class="line"><span class="keyword">import</span> Tracker <span class="keyword">from</span> <span class="string">'./libs/tracker/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入埋点配置信息，路径请自行参考项目文件位置</span></span><br><span class="line"><span class="keyword">import</span> TrackConfig <span class="keyword">from</span> <span class="string">'./config/track-config/index.js'</span>;</span><br></pre></td></tr></table></figure>
<p>3、初始化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onLaunch() &#123;</span><br><span class="line">    <span class="keyword">new</span> Tracker(&#123;</span><br><span class="line">        <span class="comment">// 自动埋点配置</span></span><br><span class="line">        trackConfig: TrackConfig,</span><br><span class="line">        <span class="comment">// 数据上报方法</span></span><br><span class="line">        reportMethod: <span class="function">(<span class="params">track</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 此处以腾讯移动分析mta埋点为例</span></span><br><span class="line">            Mta.Event.stat(track.eventId, &#123;&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、 配置埋点信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * path 页面路径</span></span><br><span class="line"><span class="comment"> * elementTracks 页面元素埋点</span></span><br><span class="line"><span class="comment"> * methodTracks 执行函数埋点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tracks = &#123;</span><br><span class="line">    path: <span class="string">"pages/news/detail"</span>,</span><br><span class="line">    elementTracks: [</span><br><span class="line">        &#123;</span><br><span class="line">            element: <span class="string">"#share"</span>,</span><br><span class="line">            eventId: <span class="string">"detail_share"</span>, <span class="comment">// mta埋点事件id</span></span><br><span class="line">            eventName: <span class="string">"详情_分享"</span>, <span class="comment">// mta埋点事件名称</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    methodTracks: [</span><br><span class="line">        &#123;</span><br><span class="line">            method: <span class="string">"showContact"</span>,</span><br><span class="line">            eventId: <span class="string">"detail_contact"</span>,</span><br><span class="line">            eventName: <span class="string">"详情_联系"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            method: <span class="string">"follow"</span>,</span><br><span class="line">            eventId: <span class="string">"detail_follow"</span>,</span><br><span class="line">            eventName: <span class="string">"详情_点赞"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>5、函数埋点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/news/detail.js</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">    ...</span><br><span class="line">    showContact() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    follow() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>6、元素埋点<br>在需要监听的元素外层绑定 elementTracker 方法，监听的元素添加id</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- pages/news/detail.wxml --&gt;</span><br><span class="line">&lt;view catchtap=<span class="string">"elementTracker"</span>&gt;</span><br><span class="line">    &lt;view id=<span class="string">"share"</span>&gt;分享&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序-腾讯移动分析配置流程</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%85%BE%E8%AE%AF%E7%A7%BB%E5%8A%A8%E5%88%86%E6%9E%90%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="平台管理"><a href="#平台管理" class="headerlink" title="平台管理"></a>平台管理</h2><h3 id="1-应用配置"><a href="#1-应用配置" class="headerlink" title="1. 应用配置"></a>1. 应用配置</h3><ul>
<li>登录 <a href="https://mta.qq.com/" target="_blank" rel="noopener">腾讯移动分析管理平台</a></li>
<li>个人中心 - 我的应用 - 微信小程序 - xx应用 - 应用管理</li>
</ul>
<h3 id="2-自定义事件"><a href="#2-自定义事件" class="headerlink" title="2. 自定义事件"></a>2. 自定义事件</h3><ul>
<li>功能组件中开启高级功能，对应会自动更新配置代码</li>
<li>配置自定义事件：基础分析 - 自定义事件 - 事件列表 - 新增事件（批量添加时，可上传腾讯文档共享文件：财智 - 前端 - 财智小程序mta埋点.csv）</li>
</ul>
<h2 id="小程序域名配置"><a href="#小程序域名配置" class="headerlink" title="小程序域名配置"></a>小程序域名配置</h2><ul>
<li>登录 <a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">微信公众平台</a></li>
<li>开发 - 开发设置 - 服务器域名，request合法域名添加 <a href="https://pingtas.qq.com" target="_blank" rel="noopener">https://pingtas.qq.com</a></li>
</ul>
<h2 id="小程序项目接入"><a href="#小程序项目接入" class="headerlink" title="小程序项目接入"></a>小程序项目接入</h2><h3 id="1-下载SDK"><a href="#1-下载SDK" class="headerlink" title="1. 下载SDK"></a>1. 下载SDK</h3><p>下载 <a href="https://mta.qq.com/mta/ctr_index/download" target="_blank" rel="noopener">微信小程序SDK</a></p>
<h3 id="2-接入统计"><a href="#2-接入统计" class="headerlink" title="2. 接入统计"></a>2. 接入统计</h3><ul>
<li>将SDK放置入项目中，目录自定义，并在应用入口app.js中引入SDK</li>
<li>在应用入口 app.js 的 <code>App.onLaunch</code> 方法调用如下代码段，初始化配置（可在“应用管理”选择配置并拷贝代码）:<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">// 这是示例代码，应用的接入代码请到“应用管理”进行拷贝</span><br><span class="line">mta.<span class="type">App</span>.init(&#123;</span><br><span class="line">    <span class="string">"appID"</span>: <span class="string">"500013092"</span>,</span><br><span class="line">    <span class="string">"eventID"</span>: <span class="string">"500015824"</span>, // 高级功能-自定义事件统计<span class="type">ID</span>，配置开通后在初始化处填写</span><br><span class="line">    <span class="string">"lauchOpts"</span>: options, // 渠道分析,需在onLaunch方法传入options,如onLaunch:function(options)<span class="meta">&#123;...&#125;</span></span><br><span class="line">    <span class="string">"statPullDownFresh"</span>: <span class="literal">true</span>, // 使用分析-下拉刷新次数/人数，必须先开通自定义事件，并配置了合法的eventID</span><br><span class="line">    <span class="string">"statShareApp"</span>: <span class="literal">true</span>, // 使用分析-分享次数/人数，必须先开通自定义事件，并配置了合法的eventID</span><br><span class="line">    <span class="string">"statReachBottom"</span>: <span class="literal">true</span>, // 使用分析-页面触底次数/人数，必须先开通自定义事件，并配置了合法的eventID</span><br><span class="line">    <span class="string">"autoReport"</span>: <span class="literal">true</span>, // 开启自动上报</span><br><span class="line">    <span class="string">"statParam"</span>: <span class="literal">true</span>, // 每个页面均加入参数上报</span><br><span class="line">    <span class="string">"ignoreParams"</span>: [<span class="string">"id"</span>, <span class="string">"time"</span>] // statParam为<span class="literal">true</span>时，如果不想上报的参数可配置忽略</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-页面统计"><a href="#3-页面统计" class="headerlink" title="3. 页面统计"></a>3. 页面统计</h3><ul>
<li><code>autoReport</code>为 true 时，每个页面自动上报；<br><code>autoReport</code>为 false 时，在需要统计的页面js中引入SDK，在<code>Page.onLoad</code>调用<code>mta.Page.init()</code>，完成初始化和统计</li>
</ul>
<h3 id="4-自定义事件统计"><a href="#4-自定义事件统计" class="headerlink" title="4. 自定义事件统计"></a>4. 自定义事件统计</h3><ul>
<li>确保应用管理中已开启自定义事件，初始化时注入eventID，并且已经配置自定义事件及参数(如需要)</li>
<li><p>在统计事件发生处调用</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">mta.Event.stat(<span class="string">"ico_search"</span>, &#123;<span class="string">"query"</span>:<span class="string">"特斯拉"</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>“ico_search” 为事件id，在配置管理页面自定义<br>“query” 为事件参数的key，在配置管理页面自定义<br>“特斯拉” 为事件参数的value</p>
</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 常用命令</title>
    <url>/2021/03/28/npm/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul>
<li><p>默认安装最新版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装指定版本</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">npm install <span class="variable">&lt;name&gt;</span><span class="meta">@版本号</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将包安装到全局环境中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">name</span>&gt; -g</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>安装的同时，将信息写入package.json中<br>如果项目路径中有package.json文件，直接使用npm install方法就可以根据 dependencies 配置安装所有的依赖包<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">name</span>&gt; <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">init</span>  创建一个<span class="keyword">package</span>.json文件，包括名称、版本、作者这些信息等</span><br></pre></td></tr></table></figure>
<h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="builtin-name">remove</span> &lt;name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">update</span> &lt;<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="列出已经安装的所有包"><a href="#列出已经安装的所有包" class="headerlink" title="列出已经安装的所有包"></a>列出已经安装的所有包</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> ls</span><br></pre></td></tr></table></figure>
<h2 id="查看当前包的安装路径"><a href="#查看当前包的安装路径" class="headerlink" title="查看当前包的安装路径"></a>查看当前包的安装路径</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> root</span><br></pre></td></tr></table></figure>
<p> 查看全局的包的安装路径<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> root -g</span><br></pre></td></tr></table></figure></p>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https://registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentry日志监控配置</title>
    <url>/2021/03/28/Sentry/React%E9%9B%86%E6%88%90Sentry/1.Sentry%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在软件开发中，对于后端技术来说，标准已经非常统一，各类监控服务已经相当成熟稳定；但是对于前端来说，各类标准此消彼长，框架层出不穷，客户端的代码越来越复杂，导致用户端的错误极其不可预期。</p>
<p>当下阶段，没有统一的日志平台，线上故障很难及时报警，定位前端bug就是 <code>console</code> 、<code>alert</code>、<code>debug</code>，效率太低；同时，移动端飞速发展，对于性能的要求越来越高，我们希望看到所有页面的接口请求、资源加载、页面渲染情况，还需要根据机型、系统做兼容性方案。那就需要一套完善的监控系统。</p>
<h2 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h2><p><a href="https://docs.sentry.io/" target="_blank" rel="noopener">Sentry</a>，是一个开源的实时日志监控平台，主要可用于监控错误日志、快速定位线上bug、监测性能等。<br>支持 Java、PHP、Python、JavaScript 等前后端主流编程语言，也可应用于前端主流框架，如 React、Vue 、Angular 等。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616856747456-f9fcd78a-7d0e-41d1-863b-268609f929f2.png" alt="sentry.png"></p>
<p>以下主要介绍Sentry在React项目中的应用。</p>
<h2 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h2><p>首先在 Sentry 组织中创建一个 React 项目：</p>
<ul>
<li>进入组织 - 项目 - 创建项目</li>
<li>选择一个平台，这里我们选择 React</li>
<li>先不用配置提醒设置，可以在创建之后再更改</li>
<li>修改项目名称</li>
<li>创建项目</li>
<li>完成后可以在项目面板看到创建好的项目</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616857303187-f0fb89b5-2ca6-4f00-acee-b2884dbb6d21.png" alt="创建项目1.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616857311251-fdcde370-e000-4a41-b40a-62130f70ab07.png" alt="创建项目2.png"></p>
<h2 id="四、配置异常监控"><a href="#四、配置异常监控" class="headerlink" title="四、配置异常监控"></a>四、配置异常监控</h2><h3 id="安装React依赖"><a href="#安装React依赖" class="headerlink" title="安装React依赖"></a>安装React依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add @sentry/react -S</span></span><br></pre></td></tr></table></figure>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>在入口文件中引入，并初始化配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Sentry <span class="keyword">from</span> <span class="string">'@sentry/react'</span>; <span class="comment">// sentry监控</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">Sentry.init(&#123;</span><br><span class="line">  dsn: <span class="string">''</span>, <span class="comment">//（必填）上报地址</span></span><br><span class="line">  environment: <span class="string">'production'</span>, <span class="comment">//（可选）设置环境，可用于筛选不同环境</span></span><br><span class="line">  release: <span class="string">'v1.0.0'</span>, <span class="comment">//（可选）设置版本号</span></span><br><span class="line">  tracesSampleRate: <span class="number">1.0</span>, <span class="comment">//（可选）配置事件的采样率，范围为0.0至1.0，默认值是1.0指发送100％的错误事件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意参数 <code>dsn</code> ：指上报地址，每个项目不同。如果未提供此值，SDK将尝试从 <code>SENTRY_DSN</code>  环境变量中读取；如果该变量也不存在，则不会发送任何事件。</p>
<p>dsn 的查找方法：sentry平台 - 对应的项目 - 设置 - Client Keys（DSN） - DSN<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616858820020-fd93bb1b-47ab-4762-bee8-5cfc845f6b9b.png" alt="DSN.png"></p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>初始化完成后，模拟一个异常，可以看到发送了 <code>?sentry_key=xxx</code> 请求，同时sentry平台有错误日志，证明异常监控已配置成功。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616858840217-fe092b14-fa6d-43ce-8fbf-f23dc31842db.png" alt="模拟报错1.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616858852863-98b15190-a47f-4d5e-af38-3d6a0fe9922c.png" alt="模拟报错2.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616858860057-d08e6e1b-a96d-4e5b-b5fb-b11aaa08641a.png" alt="模拟报错3.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616858961963-74531326-9bd1-4a06-a29f-6585f8267abd.png" alt="模拟报错4.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616858875999-61a90973-bce3-4bc1-a487-91208bf37869.png" alt="模拟报错5.png"></p>
<h2 id="五、设置日志信息"><a href="#五、设置日志信息" class="headerlink" title="五、设置日志信息"></a>五、设置日志信息</h2><p>异常监控配置完成之后，可以自行配置日志信息，以满足查询、筛选等需要。</p>
<h3 id="设置上下文信息"><a href="#设置上下文信息" class="headerlink" title="设置上下文信息"></a>设置上下文信息</h3><p>用于将任意数据附加到事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Sentry.setContext(<span class="string">'runtimeEnv'</span>, &#123;</span><br><span class="line">  envName: <span class="string">'运行环境名'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>用于识别用户身份。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Sentry.setUser(&#123;</span><br><span class="line">  username: <span class="string">'用户姓名'</span>,</span><br><span class="line">  corpName: <span class="string">'用户所在企业'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h3><p>标签是既可索引又可搜索的键/值字符串对，可用于过滤器和标签分布图，还可以快速访问相关事件，并查看一组事件的标签分布。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Sentry.setTag(<span class="string">'appName'</span>, <span class="string">'应用名'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859020891-bf130c82-a431-4e94-be4d-480059824b98.png" alt="tags.png"></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li>Sentry：<a href="https://docs.sentry.io/product/sentry-basics/" target="_blank" rel="noopener">https://docs.sentry.io/product/sentry-basics/</a></li>
<li>Sentry For React：<a href="https://docs.sentry.io/platforms/javascript/guides/react/" target="_blank" rel="noopener">https://docs.sentry.io/platforms/javascript/guides/react/</a></li>
<li>@sentry/webpack-plugin：<a href="https://www.npmjs.com/package/@sentry/webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/@sentry/webpack-plugin</a></li>
<li>webpack devtool：<a href="https://webpack.js.org/configuration/devtool/#root" target="_blank" rel="noopener">https://webpack.js.org/configuration/devtool/#root</a></li>
</ul>
]]></content>
      <categories>
        <category>Sentry</category>
      </categories>
      <tags>
        <tag>Sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentry性能监控配置</title>
    <url>/2021/03/28/Sentry/React%E9%9B%86%E6%88%90Sentry/3.Sentry%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Sentry除了异常监控之外，还集成了强大的性能监控，可以测量吞吐量、延迟等指标。通过监视应用程序的性能，可以查看一项服务中的延迟如何影响另一项服务，从而准确定位线上服务问题。</p>
<h2 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add @sentry/tracing -S</span></span><br></pre></td></tr></table></figure>
<h2 id="二、配置初始化"><a href="#二、配置初始化" class="headerlink" title="二、配置初始化"></a>二、配置初始化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Integrations <span class="keyword">as</span> TracingIntegrations &#125; <span class="keyword">from</span> <span class="string">'@sentry/tracing'</span>; <span class="comment">// 性能监控</span></span><br><span class="line"></span><br><span class="line">Sentry.init(&#123;</span><br><span class="line">  ...</span><br><span class="line">  tracesSampleRate: <span class="number">1.0</span>, <span class="comment">// 配置事件的采样率，范围为0.0至1.0，默认值是1.0指发送100％的错误事件</span></span><br><span class="line">  <span class="comment">// 配置集成</span></span><br><span class="line">  integrations: [</span><br><span class="line">    <span class="keyword">new</span> TracingIntegrations.BrowserTracing(), <span class="comment">// 性能监控</span></span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>tracesSampleRate：设置采样率，将对应比例的交易发送到Sentry。（比如要发送20％的交易，请设置tracesSampleRate为0.2）</p>
<h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><p>配置完成后，重新访问页面，然后就可以在 Sentry Performance 面板看到页面加载情况。</p>
<p>详情中可以找到所有请求访问、资源加载、前端console日志，以及设备、操作系统等详细信息。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859495709-ffa91a63-e4db-4d12-b63e-31fa12c26de5.png" alt="性能监控1.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859503122-1ab7490a-03cc-432e-ad9b-afc10b02c9fc.png" alt="性能监控2.png"></p>
]]></content>
      <categories>
        <category>Sentry</category>
      </categories>
      <tags>
        <tag>Sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目实战（基础配置）</title>
    <url>/2021/03/28/React/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/1.React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://github.com/liujinge/react-kaka" target="_blank" rel="noopener">React 项目实战</a></p>
<h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><p>下载并安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js</a></p>
<h2 id="安装-create-react-app"><a href="#安装-create-react-app" class="headerlink" title="安装 create-react-app"></a>安装 create-react-app</h2><p>使用 React.js 官网推荐的 create-react-app 自动构建，首先进行全局安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create-react-app your-project  #your-project替换为自己的项目名称</span><br></pre></td></tr></table></figure>
<p>该命令会自动构建项目，并且安装基础依赖。</p>
<p>文件结构如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616916292231-dfc523f7-3bed-481a-93b8-ab0b865da646.png" alt="react-init.png"></p>
<ul>
<li>public/index.html  入口页面</li>
<li>src/index.js  入口文件</li>
</ul>
<blockquote>
<p>需要注意的是：<br>create-react-app 做了很多工作：http服务器配置,自动代开浏览器窗口，react，es6语法编译，babel-core，webpack等等，而且将 webpack.config.js 放在了 node_modules/react-scripts/config 下。</p>
</blockquote>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd your-project</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>成功之后会自动打开浏览器<br>如果没有自动打开，可以在地址栏手动输入 <code>http://localhost:3000</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616916345209-3fcfd0ad-3b20-4cd2-9eb4-e45ec0c2f066.png" alt="React-welcome.png"></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentry上传sourceMap</title>
    <url>/2021/03/28/Sentry/React%E9%9B%86%E6%88%90Sentry/2.Sentry%E4%B8%8A%E4%BC%A0sourceMap/</url>
    <content><![CDATA[<p>前端项目部署到服务器时，都执行了代码编译、压缩。Sentry 在捕获到异常之后，错误提示永远是第1行xxxxx列。如果需要定位到错误原因，则需要上传 sourceMap 文件。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859367618-cd91a100-c3e6-4aae-96eb-8c42995c1e2c.png" alt="sourceMap失败.png"></p>
<h2 id="一、生成-map-文件"><a href="#一、生成-map-文件" class="headerlink" title="一、生成 .map 文件"></a>一、生成 .map 文件</h2><p>配置webpack：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line">&#123;</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  ...</span><br><span class="line">  optimization: &#123;</span><br><span class="line">  	minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      	sourceMap: <span class="literal">true</span>,</span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要注意：</p>
<ul>
<li><code>devtool</code> 类型：<ul>
<li><code>eval-</code>：仅用于 development 环境</li>
<li><code>inline-</code>：会打包到js文件中，导致文件过大</li>
<li><code>cheap-source-map</code>：只能提示错误在某一行</li>
<li><code>source-map</code>：生成完整的 .map 文件</li>
</ul>
</li>
<li><code>uglifyjs</code>：<ul>
<li>如果使用了 uglifyjs-webpack-plugin 插件，需要打开设置</li>
</ul>
</li>
</ul>
<p>本地build，可以看到生成 .map 文件！<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859081152-a0737b47-6230-4be4-ac26-ad5b0f266df2.png" alt="map文件.png"></p>
<h2 id="二、配置-sourceMap-上传插件"><a href="#二、配置-sourceMap-上传插件" class="headerlink" title="二、配置 sourceMap 上传插件"></a>二、配置 sourceMap 上传插件</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add @sentry/webpack-plugin -D</span></span><br></pre></td></tr></table></figure>
<p>#### </p>
<h3 id="webpack插件配置"><a href="#webpack插件配置" class="headerlink" title="webpack插件配置"></a>webpack插件配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> SentryWebpackPlugin = <span class="built_in">require</span>(<span class="string">"@sentry/webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// sentry上传sourceMap，注意将该插件设置为最后一个正在运行的插件，否则，该插件收到的结果源地图可能不是最后一个。</span></span><br><span class="line">    <span class="keyword">new</span> SentryWebpackPlugin(&#123;</span><br><span class="line">      authToken: <span class="string">'your-token'</span>,</span><br><span class="line">      url: <span class="string">'your-url'</span>,</span><br><span class="line">      org: <span class="string">'your-org-name'</span>,</span><br><span class="line">      project: <span class="string">'your-project-name'</span>,</span><br><span class="line">      include: <span class="string">'./dist'</span>,</span><br><span class="line">      ignore: [<span class="string">'node_modules'</span>],</span><br><span class="line">      release: <span class="string">'v1.0.0'</span>,</span><br><span class="line">      urlPrefix: <span class="string">'~/'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><h4 id="authToken"><a href="#authToken" class="headerlink" title="authToken"></a><code>authToken</code></h4><p>用于与Sentry进行所有通信的身份验证令牌，每个账号都有自己的<code>authToken</code>，权限不同。查找方式：点击头像 - API Keys，可以看到自己的token；如果没有，直接创建一个。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859115303-956c41c1-95e6-440d-87f9-a59600259924.png" alt="authToken.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859138078-d05a8d70-4a4b-4bba-9063-69a171f7d361.png" alt="创建authToken.png"></p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a><code>url</code></h4><p>Sentry实例的基本URL。默认为<code>[https://sentry.io/](https://sentry.io/)</code>，如果是自建服务，这里设置成自己的服务域名。</p>
<h4 id="org"><a href="#org" class="headerlink" title="org"></a><code>org</code></h4><p>组织名，用于上传到对应的组织，查找方式：组织 - 设置 - General Settings，注意是 Organization Slug，而不是 Display Name<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859170311-0a9b799e-6e5d-4c54-9611-026897990662.png" alt="org.png"></p>
<h4 id="project"><a href="#project" class="headerlink" title="project"></a><code>project</code></h4><p>项目名，作用同上，查找方式：其实就是项目列表中的名称，不信？对应项目 - 设置 - General Settings，一样不~<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859196001-9cb716ae-0bcb-4c14-9404-777ffc51a705.png" alt="project.png"></p>
<h4 id="include"><a href="#include" class="headerlink" title="include"></a><code>include</code></h4><p>查找.map文件的目录，比如 <code>./dist</code></p>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a><code>ignore</code></h4><p>忽略的文件或目录，默认<code>[&#39;node_modules&#39;]</code></p>
<h4 id="release"><a href="#release" class="headerlink" title="release"></a><code>release</code></h4><p>版本号，这里注意：</p>
<ul>
<li>需要和初始化 init 设置的版本号一致：<code>release: &#39;v1.0.0&#39;, //（可选）设置版本号</code></li>
<li>如果有多个项目，给版本号加前缀 <code>xxx@</code> ，可以上传到对应项目<h4 id="urlPrefix"><a href="#urlPrefix" class="headerlink" title="urlPrefix"></a><code>urlPrefix</code></h4>添加在所有文件名的前缀，默认<code>~/</code>，具体路径可以匹配自己项目打包后的服务器目录。（一定要配置正确）</li>
</ul>
<h2 id="三、验证上传结果"><a href="#三、验证上传结果" class="headerlink" title="三、验证上传结果"></a>三、验证上传结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859401139-83b5e65d-a085-4a90-9c6f-a16bb8d23de1.png" alt="sourceMap成功1.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859409286-81d9a18f-6e04-4a76-8da3-11a6f287dd79.png" alt="sourceMap成功2.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859413544-24d58a1b-01fa-49a3-80af-8566ef0a06ad.png" alt="sourceMap成功3.png"></p>
<h2 id="四、通过文件管理配置"><a href="#四、通过文件管理配置" class="headerlink" title="四、通过文件管理配置"></a>四、通过文件管理配置</h2><p>在插件配置中，我们在 <code>new SentryWebpackPlugin({})</code> 中固定设置了 <code>authToken</code> <code>url</code> <code>org</code> <code>project</code> 几个参数。</p>
<p>另一种方式，可以借助 <code>@sentry/cli</code> 从配置文件中加载。</p>
<h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add @sentry/cli -D</span></span><br></pre></td></tr></table></figure>
<h3 id="新建-sentryclirc-文件"><a href="#新建-sentryclirc-文件" class="headerlink" title="新建 .sentryclirc 文件"></a>新建 <code>.sentryclirc</code> 文件</h3><p>这个文件就是 <code>@sentry/cli</code> 将要加载的配置文件，建议直接放在根目录下。</p>
<p>文件内容如下（对应值请根据自己项目修改）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">url</span>=your-url</span><br><span class="line"><span class="attr">org</span>=your-org</span><br><span class="line"><span class="attr">project</span>=your-project</span><br><span class="line"> </span><br><span class="line"><span class="section">[auth]</span></span><br><span class="line"><span class="attr">token</span>=your-token</span><br></pre></td></tr></table></figure>
<p>这里需要注意 <code>token</code> ：</p>
<ul>
<li>名称不是authToken</li>
<li>建议放在服务器上，通过读取环境变量来设置</li>
</ul>
<h3 id="修改插件配置"><a href="#修改插件配置" class="headerlink" title="修改插件配置"></a>修改插件配置</h3><p>修改 webpack 配置：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> SentryWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 首先会通过 sentry-cli 加载根目录中的 .sentryclirc 配置，然后再配置以下内容</span></span><br><span class="line">      <span class="comment">// 因此这里直接删除配置文件中已有的配置项即可</span></span><br><span class="line">      include: <span class="string">'./dist'</span>,</span><br><span class="line">      ignore: [<span class="string">'node_modules'</span>],</span><br><span class="line">      release: <span class="string">'v1.0.0'</span>,</span><br><span class="line">      urlPrefix: <span class="string">'~/'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="五、自动上传-or-手动上传"><a href="#五、自动上传-or-手动上传" class="headerlink" title="五、自动上传 or 手动上传"></a>五、自动上传 or 手动上传</h2><p>除了以上通过 webpack 插件自动上传 .map 之外，还可以用 <code>sentry-cli</code> 手动上传。有兴趣的同学研究一下。</p>
<p>不过，还是推荐自动上传，操作错误率低！方便！</p>
<h2 id="六、删除-map-文件"><a href="#六、删除-map-文件" class="headerlink" title="六、删除 .map 文件"></a>六、删除 .map 文件</h2><p>生成的 .map 文件，如果保留在服务器，会存在安全问题。</p>
<p>因此，当上传到 sentry 之后，建议把服务器上的 .map 文件删除。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    "delete:map": "rimraf dist/js/*.map"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn delete:map</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1616859441269-7732431b-39ec-4009-bc94-c3f5bb2cf393.png" alt="删除map文件.png"></p>
<h2 id="七、重点避坑项总结"><a href="#七、重点避坑项总结" class="headerlink" title="七、重点避坑项总结"></a>七、重点避坑项总结</h2><ul>
<li>sourceMap一定要开启，<code>devtool: &#39;source-map&#39;</code>，uglifyjs-webpack-plugin 设置 <code>sourceMap: true</code></li>
<li>@sentry/webpack-plugin 要设置 <code>release</code> 参数指定版本，同时 <code>Sentry.init</code> 版本号需要保持一致</li>
<li>@sentry/webpack-plugin <code>urlPrefix</code> 参数一定要配置正确</li>
<li>上传成功后记得删除 .map 文件</li>
</ul>
]]></content>
      <categories>
        <category>Sentry</category>
      </categories>
      <tags>
        <tag>Sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目实战（路由配置）</title>
    <url>/2021/03/28/React/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/2.React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://github.com/liujinge/react-kaka" target="_blank" rel="noopener">React 项目实战</a></p>
<p>在准备开发的时候，发现 React Router 已经更新到了 4.0，但最重要的是：4.0竟然不向下兼容，而且还拆分出了 <code>react-router</code>、<code>react-router-dom</code>、<code>react-router-native</code>、<code>react-router-redux</code> 等多个相互独立的包。</p>
<p>这…好吧，我们还是跟上潮流就好！</p>
<blockquote>
<p>在使用路由的整个过程中，务必深深理解一句话：路由即组件！</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom --save</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>很多同学将路由直接配置在了入口文件，但这样做可能会出现一个问题：当路由配置过多时，入口文件会特别难维护。</p>
<p>因此，可以尝试将路由的相关配置直接独立出来，在需要的时候引入即可，这样整个项目结构会特别清晰。</p>
<blockquote>
<p>以下会出现很多陌生标签，只要晓得都是 react-router-dom 特有的标签就好。</p>
</blockquote>
<p>在 src 目录下新建 router 目录，并在其下创建 index.js 文件，用于存放所有的路由配置。文件基本内容大致如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Route, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./../pages/home/home'</span>;</span><br><span class="line"><span class="keyword">import</span> Subscribe <span class="keyword">from</span> <span class="string">'./../pages/subscribe/subscribe'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./../pages/user/user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div className=<span class="string">"page-wrapper"</span>&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">"/"</span> render=&#123;() =&gt; (</span><br><span class="line">          &lt;Redirect to=<span class="string">"/home"</span>/&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/home"</span> component=&#123; Home &#125;/&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/subscribe"</span> component=&#123; Subscribe &#125;/&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user"</span> component=&#123; User&#125;/&gt;</span><br><span class="line">       &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Router;</span></span><br></pre></td></tr></table></figure>
<p>细心的朋友会发现：这不就是一个 React 组件吗？<br>对了，不知还记得否：路由即组件！</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>这里，我在 components 下有一个 tab.js，作用类似于手机App的 tab。内容很简单，就是一些路由的链接：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tab</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tab</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div className=<span class="string">"tab-wrapper"</span>&gt;</span><br><span class="line">        &lt;Link to=<span class="string">"/home"</span> className=<span class="string">"tab-item t-c"</span>&gt;首页&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span>subscribe<span class="string">" className="</span>tab-item t-c<span class="string">"&gt;订阅&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/user<span class="string">" className="</span>tab-item t-c<span class="string">"&gt;我的&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Tab;</span></span><br></pre></td></tr></table></figure>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>既然路由是组件，那引入就很简单了。</p>
<p>比如直接将路由组件引入到主容器 app.js 中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主容器</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./../../router'</span>;</span><br><span class="line"><span class="keyword">import</span> Tab <span class="keyword">from</span> <span class="string">'./../../components/tab'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;div className=<span class="string">"main-wrapper"</span>&gt;</span><br><span class="line">            &lt;Router /&gt;</span><br><span class="line">            &lt;Tab /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特别注意：<br><code>Route</code>、&gt; <code>Redirect</code>、&gt; <code>Link</code> 等标签必须在同一个 &gt; <code>BrowserRouter</code> 之中。</p>
</blockquote>
<p>这样，一个简单的路由就完成了。</p>
<hr>
<p>关于更多的用法，可以参考这几篇文章：<br><a href="http://www.jianshu.com/p/e3adc9b5f75c" target="_blank" rel="noopener">初探 React Router 4.0</a><br><a href="https://www.cnblogs.com/libin-1/p/7067938.html" target="_blank" rel="noopener">ReactRouter升级 v2 to v4</a><br><a href="http://www.cnblogs.com/dudeyouth/p/6617059.html" target="_blank" rel="noopener">react-router-dom v4</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目实战（HTTP 请求）</title>
    <url>/2021/03/28/React/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/3.React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-HTTP%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p><a href="https://github.com/liujinge/react-kaka" target="_blank" rel="noopener">React 项目实战</a></p>
<p>React 并没有提供获取数据的方式，因此需要自己封装 Ajax 或者引入 HTTP 库。</p>
<p>目前有很多这类型的库，各有特色，但实现的功能却大同小异。</p>
<p>这里我引用的是 <code>axios</code>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>常用的使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(url[, config])</span><br><span class="line"></span><br><span class="line">axios.post(url[, data[, config]])</span><br></pre></td></tr></table></figure>
<p>config：请求的基本配置，比如请求头，baseURL等</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>实际中，一般要对 <code>axios</code> 进行封装，直接得到需要的数据。</p>
<p>比如新建 axios/index.js 文件并做简单配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errHandler</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xhr = (&#123;</span><br><span class="line">  method = <span class="string">'get'</span>,</span><br><span class="line">  url,</span><br><span class="line">  options = &#123;&#125;,</span><br><span class="line">  headers = &#123;&#125;,</span><br><span class="line">  emulateJSON = <span class="literal">true</span></span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> p;</span><br><span class="line">  <span class="keyword">switch</span>(method) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'get'</span>:</span><br><span class="line">      p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        axios.get(url, &#123;</span><br><span class="line">          params: options</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">          resolve(response.data);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">          errHandler(response);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'post'</span>:</span><br><span class="line">      p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        axios.post(url, options, &#123;</span><br><span class="line">          headers,</span><br><span class="line">          emulateJSON</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">          resolve(response.data);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">          errHandler(response);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      p = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> xhr;</span><br></pre></td></tr></table></figure>
<p>之后可以在需要请求的地方引入并调用，关键代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xhr <span class="keyword">from</span> <span class="string">'./../../axios'</span>;</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">    <span class="comment">// 默认get请求</span></span><br><span class="line">    xhr(&#123;</span><br><span class="line">      url: <span class="string">'yourUrl'</span>,</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多的配置，根据 <a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios api</a> 以及项目需求不断完善就好。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>模式对比</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E7%94%9F%E6%80%81%E5%90%84%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/5.%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"><strong>微信小程序</strong></th>
<th style="text-align:center"><strong>微信SaaS小程序</strong></th>
<th style="text-align:center"><strong>企业微信小程序</strong></th>
<th style="text-align:center"><strong>企业微信SaaS小程序</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">开发权限</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">第三方</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">第三方</td>
</tr>
<tr>
<td style="text-align:center">开发者工具模式</td>
<td style="text-align:center">小程序</td>
<td style="text-align:center">小程序</td>
<td style="text-align:center">企业微信小程序</td>
<td style="text-align:center">企业微信小程序</td>
</tr>
<tr>
<td style="text-align:center">上传代码平台</td>
<td style="text-align:center">微信公众平台</td>
<td style="text-align:center">微信开放平台 - 第三方平台 - 模板库</td>
<td style="text-align:center">微信公众平台</td>
<td style="text-align:center">微信开放平台 - 第三方平台 - 模板库</td>
</tr>
<tr>
<td style="text-align:center">上传时是否可自定义配置</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">体验版配置平台</td>
<td style="text-align:center">微信公众平台</td>
<td style="text-align:center">第三方平台调用接口</td>
<td style="text-align:center">微信公众平台</td>
<td style="text-align:center">第三方平台调用接口</td>
</tr>
<tr>
<td style="text-align:center">提审权限</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">第三方</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">第三方</td>
</tr>
<tr>
<td style="text-align:center">发布权限</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">第三方</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">第三方</td>
</tr>
<tr>
<td style="text-align:center">发布平台</td>
<td style="text-align:center">微信公众平台</td>
<td style="text-align:center">第三方平台调用接口发布</td>
<td style="text-align:center">微信公众平台发布 - 绑定企业微信</td>
<td style="text-align:center">第三方平台调用接口发布 - 绑定企业微信</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>企业微信小程序</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E7%94%9F%E6%80%81%E5%90%84%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/3.%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>即企业微信环境内部开发小程序</p>
</blockquote>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>企业微信移动客户端从2.5.8版本开始，可以将微信小程序移植到企业微信中运行，也就称为“企业微信小程序”。</p>
<p>其实，企业微信小程序本质上就是微信小程序的能力集成与扩展。微信小程序的大部分功能，都可以在企业微信环境中运行，同时企业微信还扩展了一些特有的功能。</p>
<h2 id="二、准备阶段"><a href="#二、准备阶段" class="headerlink" title="二、准备阶段"></a>二、准备阶段</h2><h3 id="企业微信"><a href="#企业微信" class="headerlink" title="企业微信"></a>企业微信</h3><blockquote>
<p>既然开发企业微信小程序，肯定得先有个企业微信啦~</p>
</blockquote>
<p>在 <a href="https://work.weixin.qq.com/?from=openApi" target="_blank" rel="noopener">企业微信官网</a> 直接注册一个企业微信，主体可以是公司或个人</p>
<h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>企业微信小程序本质也是微信小程序，因此同样是在 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a> 注册，或者直接使用已有的微信小程序。</p>
<h2 id="三、开发阶段"><a href="#三、开发阶段" class="headerlink" title="三、开发阶段"></a>三、开发阶段</h2><h3 id="开发者工具支持"><a href="#开发者工具支持" class="headerlink" title="开发者工具支持"></a>开发者工具支持</h3><p>开发企业微信小程序，也是使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">微信开发者工具</a> 。</p>
<p>开发者工具默认是微信小程序模式，支持的api也仅限于微信环境；如果需要模拟企业微信环境，需要使用 1.02.1903211 及以上版本，并且安装企业微信小程序插件。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615025751593-20f65fdf-2886-4c6a-bc1e-03f5ed6c1dca.png" alt="插件.png"></p>
<p>安装好插件后，就可以切换到企业微信小程序模式。同时，还需要注意切换企业。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615025766575-4a2339bf-5f19-4616-a6fe-859db09531d2.png" alt="选择模式.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615025774895-491a572a-c848-4a23-9ba4-d99466bd24fe.png" alt="选择企业.png"></p>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>在开发阶段中，创建小程序项目、项目配置、全局配置都和微信小程序相同。</p>
<p>但在页面开发过程中，需要注意几个点：</p>
<h5 id="1、运行环境"><a href="#1、运行环境" class="headerlink" title="1、运行环境"></a>1、运行环境</h5><p>由于微信小程序的部分接口不支持在企业微信中调用，而企业微信也有特有的一些api，那么我们就需要区分微信和企业微信环境。</p>
<p>判断方法：调用 <code>wx.getSystemInfo</code> 获取当前运行环境信息，然后根据 <code>environment</code> 是否为 <code>wxwork</code> 来区分。</p>
<blockquote>
<p>为方便页面中调用判断，建议放在全局变量中。</p>
</blockquote>
<h5 id="2、登录"><a href="#2、登录" class="headerlink" title="2、登录"></a>2、登录</h5><p>微信环境下，调用的是微信小程序登录接口来获取个人用户的身份信息；</p>
<p>但是在企业微信环境中，需要调用 <a href="https://work.weixin.qq.com/api/doc/90000/90136/91506" target="_blank" rel="noopener">企业微信小程序登录</a>，获取到的是当前企业微信用户在该企业中的员工身份信息。</p>
<h5 id="3、微信小程序支持情况"><a href="#3、微信小程序支持情况" class="headerlink" title="3、微信小程序支持情况"></a>3、微信小程序支持情况</h5><p>在开发过程中，一定要特别注意微信小程序在企业微信环境中的支持情况，尤其是 <a href="https://work.weixin.qq.com/api/doc/90000/90136/91503" target="_blank" rel="noopener">微信小程序API支持情况</a>、<a href="https://work.weixin.qq.com/api/doc/90000/90136/91504" target="_blank" rel="noopener">微信小程序组件支持情况</a>，需要做好兼容，否则很容易出错。</p>
<p>对于微信小程序新增的api，如果要在企业微信中使用，一定要注意版本是否支持，并且一定要通过多种机型验证才可！</p>
<h5 id="4、企业微信特有功能开发"><a href="#4、企业微信特有功能开发" class="headerlink" title="4、企业微信特有功能开发"></a>4、企业微信特有功能开发</h5><p>另外，为了满足企业中的场景，企业微信中也新增了一些特有的api。这类接口都是以 <code>wx.qy</code> 来命名，仅限于在企业微信中使用，微信端不支持。</p>
<p>在调用这些接口时，一定要注意对于企业微信的版本要求，做好兼容！</p>
<h2 id="四、体验阶段"><a href="#四、体验阶段" class="headerlink" title="四、体验阶段"></a>四、体验阶段</h2><h3 id="版本概念"><a href="#版本概念" class="headerlink" title="版本概念"></a>版本概念</h3><p>开发预览版 - 开发版本 - 体验版本 - 审核版本 - 线上版本</p>
<h3 id="开发预览"><a href="#开发预览" class="headerlink" title="开发预览"></a>开发预览</h3><p>在开发阶段，我们可以通过“模拟器”来实时看到运行效果。</p>
<p>但是，如果需要真机体验的话，就需要“预览”生成二维码，然后通过真机“企业微信app”扫码验证。</p>
<p>注意：</p>
<ul>
<li>如果加入了多个企业微信的话，一定要选择到对应企业，否则就获取不到用户信息了！</li>
<li>如果该企业微信小程序还希望运行在微信环境中，则同样需要用个人微信扫码才可体验（操作方法同微信小程序）</li>
</ul>
<h3 id="上传开发版"><a href="#上传开发版" class="headerlink" title="上传开发版"></a>上传开发版</h3><p>上传方法同微信小程序，在开发者工具上传后，即可以在“微信公众平台”看到对应开发版。</p>
<h3 id="配置体验版"><a href="#配置体验版" class="headerlink" title="配置体验版"></a>配置体验版</h3><p>企业微信小程序，配置体验版的方法不同于微信小程序。</p>
<p>可配置体验版前提：小程序关联到企业微信，而关联的要求又是线上已发布的小程序！那么，这个功能，就只能在第一次发布、并且关联之后才可以使用了~</p>
<p>满足了前提之后，就可以来进行配置，<a href="https://work.weixin.qq.com/api/doc/90000/90136/92380" target="_blank" rel="noopener">来看下</a>：</p>
<ul>
<li>1、在微信开发者工具生成预览二维码</li>
<li>2、开发者使用企业微信扫码打开小程序开发版</li>
<li>3、点击右上角“…”，然后点击配置体验版</li>
<li>4、进入页面选择体验成员，发送体验邀请（被邀请的成员需在小程序可见范围内，可在企业微信管理后台 - 应用与小程序 - 小程序详情页进行配置）</li>
<li>5、企业成员收到小程序通知后，通过点击小程序通知卡片即可使用该小程序体验版</li>
</ul>
<h2 id="五、发布阶段"><a href="#五、发布阶段" class="headerlink" title="五、发布阶段"></a>五、发布阶段</h2><h3 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h3><p>提交审核操作，和微信小程序就相同了，在“微信公众平台”选择已验收的开发版或者体验版，提交审核即可。</p>
<blockquote>
<p>这里需要注意：如果企业微信小程序仅支持在企业微信运行，不支持个人微信的话，提审的时候一定得注明。如果审核被微信驳回，需要联系企业微信客服帮忙提审~</p>
</blockquote>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>审核通过，别忘了点“发布”！</p>
<p>如果是第一次发布，别忘了关联到企业微信！</p>
<h3 id="企业微信关联小程序"><a href="#企业微信关联小程序" class="headerlink" title="企业微信关联小程序"></a>企业微信关联小程序</h3><p>企业微信小程序，需要将小程序关联在该企业微信，这样就可以通过企业微信app的“工作台”入口访问到。</p>
<blockquote>
<p>这里需要注意：企业微信关联小程序，必须要求该小程序是线上已发布的小程序！也就意味着，如果是新小程序，一定得需要开发、测试完成、审核通过并发布之后才可以进行关联！</p>
</blockquote>
<p>关联方法如下（仅管理员可操作），<a href="https://work.weixin.qq.com/api/doc/90000/90136/92370" target="_blank" rel="noopener">来看下</a>：</p>
<ul>
<li>1、扫码登录 <a href="https://work.weixin.qq.com/wework_admin/loginpage_wx?from=myhome_openApi" target="_blank" rel="noopener">企业微信管理后台</a>， 进入“应用 - 创建应用 - 关联小程序”</li>
<li>2、关联需要小程序所属的管理员微信号进行扫码授权</li>
<li>3、设置可见范围</li>
<li>4、关联成功之后，可见范围的成员就可以在“企业微信app - 工作台”看到</li>
</ul>
<hr>
<blockquote>
<p>工作台访问试试看~</p>
</blockquote>
<h2 id="六、流程总结"><a href="#六、流程总结" class="headerlink" title="六、流程总结"></a>六、流程总结</h2><ul>
<li>申请企业微信</li>
<li>申请微信小程序</li>
<li>微信小程序全局配置、业务开发</li>
<li>开发者企业微信扫码预览</li>
<li>配置体验版（第一次不可用）</li>
<li>开发者工具提交代码到微信公众平台</li>
<li>微信公众平台提交审核</li>
<li>审核通过后，发布</li>
<li>企业微信关联小程序（如果已关联则不需要）</li>
<li>企业微信工作台访问</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>企业微信SaaS小程序</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E7%94%9F%E6%80%81%E5%90%84%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/4.%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1SaaS%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>即企业微信环境第三方代开发类型小程序</p>
</blockquote>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>企业微信环境下的第三方代开发小程序，这一类的要求就是：</p>
<p>企业微信需要是SaaS，小程序也需要是SaaS，而且，小程序还得是企业微信小程序！</p>
<p>看似比较复杂，但实际开发过程，只要熟悉单个的“企业微信小程序” 和 “微信SaaS小程序”，逐步操作，也是比较容易理解的~</p>
<p>两类开发模式的具体流程，可以看前两篇。</p>
<p>这里，我们主要梳理下开发“企业微信SaaS小程序” 需要做什么：</p>
<h2 id="二、准备及开发阶段"><a href="#二、准备及开发阶段" class="headerlink" title="二、准备及开发阶段"></a>二、准备及开发阶段</h2><ul>
<li>微信模板小程序<ul>
<li>申请微信开放平台</li>
<li>申请第三方平台</li>
<li>申请模板小程序</li>
<li>模板小程序绑定到第三方平台</li>
<li>提审、发布模板小程序</li>
</ul>
</li>
<li>企业微信<ul>
<li>开通企业微信</li>
<li>模板小程序做好企业微信兼容，同时注意第三方平台可以调用的api权限范围，有些信息不会开放给第三方</li>
<li>再次提审、发布模板小程序（如果第一次提审时已兼容，则可不用更新）</li>
</ul>
</li>
<li>企业微信模板小程序<ul>
<li>将微信模板小程序绑定到企业微信</li>
<li>内部体验</li>
</ul>
</li>
</ul>
<h2 id="三、客户授权阶段"><a href="#三、客户授权阶段" class="headerlink" title="三、客户授权阶段"></a>三、客户授权阶段</h2><ul>
<li>小程序<ul>
<li>申请自己主体的小程序</li>
<li>小程序授权给第三方平台</li>
</ul>
</li>
<li>企业微信<ul>
<li>申请自己主体的企业微信</li>
<li>企业微信授权给第三方平台</li>
</ul>
</li>
</ul>
<h2 id="四、部署阶段"><a href="#四、部署阶段" class="headerlink" title="四、部署阶段"></a>四、部署阶段</h2><ul>
<li>第三方根据客户需求，确定需要使用的小程序模板，完成自定义配置</li>
<li>第三方提交客户小程序审核、发布</li>
<li>将发布成功的小程序绑定到客户企业微信</li>
<li>企业微信工作台访问</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E7%94%9F%E6%80%81%E5%90%84%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/1.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>即微信环境普通类型小程序</p>
</blockquote>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>微信环境中加载的一个轻应用程序，可以把app的功能集成到小程序中，然后用户就可以在微信中实现app的基本功能。</p>
<p>简单理解就是：小程序，相当于app；而微信，就是小程序的appStore。</p>
<h2 id="二、准备阶段"><a href="#二、准备阶段" class="headerlink" title="二、准备阶段"></a>二、准备阶段</h2><h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><blockquote>
<p>首先得有个小程序了~</p>
</blockquote>
<p>在 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a> 找到“注册”入口，选择“小程序”进行注册。</p>
<p>这里注意：如果是主体是个人，需要自己的身份信息；如果主体是企业，则需要相关的企业资质材料，提交资质认证时，需要300大洋给微信，另外，小程序名称一定得想好，如果变更的话，也是需要300重新认证。</p>
<p>注册完成，登录之后即可看到小程序相关信息。在我们的业务场景中，关注较多的是“管理”“开发”“设置”菜单，建议多熟悉每个菜单中的设置项。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615019232344-089ea5e2-19b9-4b43-b477-af44e48aab71.png" alt="微信公众平台常用菜单.png"></p>
<h3 id="开发者权限"><a href="#开发者权限" class="headerlink" title="开发者权限"></a>开发者权限</h3><p>小程序的账号和个人微信绑定，用户角色有管理员、运营者、开发者、数据分析者。</p>
<p>小程序的账号申请者即为管理员。</p>
<p>参与小程序开发的成员，必须要有开发者权限，需要管理员在“管理 - 成员管理”菜单将个人微信添加为开发者。</p>
<h2 id="三、开发阶段"><a href="#三、开发阶段" class="headerlink" title="三、开发阶段"></a>三、开发阶段</h2><h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><p>小程序开发需要使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">微信开发者工具</a>，可以下载安装</p>
<h3 id="创建小程序项目"><a href="#创建小程序项目" class="headerlink" title="创建小程序项目"></a>创建小程序项目</h3><p>安装完成之后，需要微信扫码登录一下，然后，就可以开始创建小程序项目。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615013828387-c75b3a4a-59d6-416c-bc47-7e2de5130f00.png" alt="创建小程序项目.png"></p>
<p>创建时需要有AppID，可以在微信公众平台选择小程序登录后，通过“设置-基本设置”菜单找到当前小程序的AppID。</p>
<blockquote>
<p>请注意：如果只能看到原始ID，并没有AppID，那就是跳过了一些小程序认证，老老实实完成吧~</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615014155517-768a6a52-a3a2-4abe-b55e-669dfc17b189.png" alt="查看AppID.png"></p>
<p>如果创建时提示不是该小程序的开发者或者没有开发者权限，请联系管理员添加~</p>
<p>创建完成之后，即可看到demo页面！</p>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>在根目录中，可以看到 <code>project.config.json</code> 文件，主要是对当前小程序项目的配置，也可以理解为当前项目开发工具配置，为了保持多个开发者、多个开发工具展示统一。比如小程序appid、项目名称、项目描述、版本库、编译模式、编辑器设置等。</p>
<p>修改完成之后，即可在开发者工具菜单栏 - 详情（一般在右上角），看到当前小程序的相关信息。</p>
<p>这里注意：</p>
<ul>
<li><code>appid</code> ：小程序的appid，也就是在创建项目时填入的AppID；开发者工具就是根据这个来匹配对应小程序，一定要配置正确，否则小程序将无法运行。</li>
<li><code>projectname</code>：只是当前项目的名称，和小程序名称以及小程序顶部栏标题没有关系。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615015761943-f9aa9796-aabb-4ea1-9370-a6b18caf384f.png" alt="创建项目成功.png"></p>
<h3 id="全局配置及入口逻辑"><a href="#全局配置及入口逻辑" class="headerlink" title="全局配置及入口逻辑"></a>全局配置及入口逻辑</h3><ul>
<li><code>app.json</code>：小程序的全局配置，比如小程序的页面路由、外观样式（顶部栏标题及颜色、背景主题及颜色等）、tabbar、网络请求时长、授权提示、插件、公共组件等。</li>
<li><code>app.js</code>：小程序入口文件，可以监听小程序启动、切换前后台等生命周期；同时可以设置全局变量，比如 <code>globalData</code>，在页面中就可以通过app实例获取到全局数据。</li>
<li><code>app.wxss</code>：全局样式，可以统一标签样式、声明公共样式类等。</li>
</ul>
<h3 id="页面开发"><a href="#页面开发" class="headerlink" title="页面开发"></a>页面开发</h3><p>全局配置完成之后，就可以根据业务需求完成页面开发了！</p>
<p>开发过程中需要注意：</p>
<h5 id="1、可信域名配置："><a href="#1、可信域名配置：" class="headerlink" title="1、可信域名配置："></a>1、可信域名配置：</h5><p>前后端交互，肯定会有接口请求、上传下载资源；有可能还会有socket通信、web-view嵌套H5页面等。</p>
<p>这一类的域名，都需要在“微信公众平台 - 开发 - 开发管理 - 开发设置”中配置相关可信域名。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615019262072-c3532cc9-43de-444b-9f3a-d536c433dfb8.png" alt="域名配置.png"></p>
<p>配置完成之后，可以在“开发者工具 - 详情 - 项目配置”中看到配置成功的域名信息。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615016066086-0affb64e-f466-47d3-a04f-3adb3b104f8c.png" alt="域名配置成功.png"></p>
<h5 id="2、包内存大小限制："><a href="#2、包内存大小限制：" class="headerlink" title="2、包内存大小限制："></a>2、包内存大小限制：</h5><p>小程序会限制每个包大小， 注意控制资源内存，尤其是本地图片一定要压缩。必要时建议分包，减少每个包内存，同时可以提升用户体验！</p>
<h2 id="四、体验阶段"><a href="#四、体验阶段" class="headerlink" title="四、体验阶段"></a>四、体验阶段</h2><h3 id="版本概念"><a href="#版本概念" class="headerlink" title="版本概念"></a>版本概念</h3><p>开发预览版 - 开发版本 - 体验版本 - 审核版本 - 线上版本</p>
<h3 id="开发预览"><a href="#开发预览" class="headerlink" title="开发预览"></a>开发预览</h3><p>在我们的开发完成后，需要通过真机来体验。那就可以“预览”生成一个二维码（这个码会上传到微信服务器），然后用真机微信来扫码即可。</p>
<p>同时，我们也可以把这个二维码发给其他开发者，体验我们当前的版本。</p>
<p>在这个码的有效期内，都可以一直访问；当更改了代码，再次预览又会生成新的二维码。</p>
<p>那么，其实就可以理解为是一个有时效的“开发预览版”。</p>
<blockquote>
<p>注意：如果小程序涉及到分享功能，那接收到小程序消息的用户，直接打开我们的页面，就会默认是线上已发布的或者之前体验过的版本，并不是当前开发最新版。为了保证体验的是同一个版本，就必须先扫描二维码，然后再打开小程序消息才可以（注意：开发预览码只能给开发者使用，接收者要扫码的话需要有开发者权限）。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615016784069-3d6d8247-1eda-4a34-b2f0-02252de58644.png" alt="预览生成二维码.png"></p>
<h3 id="上传开发版"><a href="#上传开发版" class="headerlink" title="上传开发版"></a>上传开发版</h3><blockquote>
<p>小程序不同于我们常规的web项目需要打包部署，而是将小程序代码上传到微信公众平台，审核通过并发布后，用户访问时会加载对应版本的小程序。</p>
</blockquote>
<blockquote>
<p>其实这就是“小”程序的概念：常规app是需要下载安装的，“小”程序也需要下载，只是体积比较小，并且运行在特定的app环境中了而已，如果不想使用，直接移出（卸载）即可。微信公众平台的“背后”肯定还有个“应用市场”。</p>
</blockquote>
<p>当完成业务需求，并且真机预览OK后，就可以上传代码到微信公众平台了。</p>
<p>操作方法：</p>
<ul>
<li>开发者工具 - 上传 - 填写对应的版本号及描述 - 确认上传</li>
<li>上传成功之后，登录微信公众平台</li>
<li>管理 - 版本管理，即可以看到已经上传到“开发版本”</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615017056755-471654ee-486f-4869-ab72-0c6b01c39a09.png" alt="开发者工具上传代码.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615019295566-ca020293-7595-41b9-9470-38c564db5e22.png" alt="上传成功.png"></p>
<h3 id="配置体验版"><a href="#配置体验版" class="headerlink" title="配置体验版"></a>配置体验版</h3><p>为什么需要体验版？其实主要是开发版一直在变更，很不稳定；测试、产品同学在验收时，需要的是一个稳定的版本。</p>
<p>操作方法：</p>
<ul>
<li>在刚刚的“微信公众平台 - 开发版本”中，选择一个可以验收的版本，设置“选为体验版”即可</li>
<li>设置为体验版的版本，可以看到标识</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615019330895-87ff48e9-7127-4f86-b364-0c3370793033.png" alt="选为体验版.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615017584740-552dd550-5160-4129-b770-83b2018d2b08.png" alt="生成体验版.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615017585987-7e70a39e-c8e2-414c-a09d-b2a674b1b678.png" alt="体验版标识.png"></p>
<h2 id="五、发布阶段"><a href="#五、发布阶段" class="headerlink" title="五、发布阶段"></a>五、发布阶段</h2><h3 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h3><p>在开发、测试、体验OK之后，那也就意味着该版本可以上线了~</p>
<p>不过，刚刚已经提到了，“小程序不是我们想上线就可以上”，审核是很重要一个环节！！！</p>
<p>操作方法：选择验收完成的开发版或体验版，“提交审核”！</p>
<blockquote>
<p>这里需要注意：在提审之前，一定要确认自己的小程序是否可以通过审核:</p>
<ul>
<li>小程序页面功能是否OK？比如是否有demo页面、交互阻塞、请求报错等？</li>
<li>页面中是否有敏感信息？</li>
<li>页面中是否涉及资质认证，比如新闻资讯、理财、直播等，小程序有资质认证吗？</li>
<li>…</li>
<li>确认没有问题！提审！然后就会在审核版本列表中看到~</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615019381646-bf02a732-113e-403a-92e7-a177b3a1dadf.png" alt="提交审核.png"></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>通过审核之后，一定不要忘了点 “发布”！</p>
<p>发布成功之后，就可以在微信中访问啦~</p>
<hr>
<blockquote>
<p>OK，以上就是普通微信小程序的开发流程了~</p>
</blockquote>
<h2 id="六、流程总结"><a href="#六、流程总结" class="headerlink" title="六、流程总结"></a>六、流程总结</h2><ul>
<li>申请小程序</li>
<li>开发者工具创建小程序项目、配置全局文件、实现业务</li>
<li>开发者微信扫码预览</li>
<li>开发者工具提交代码到微信公众平台</li>
<li>微信公众平台选择一个开发版生成体验版</li>
<li>验证完成之后提交微信审核</li>
<li>审核通过，发布</li>
<li>微信访问</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信SaaS小程序</title>
    <url>/2021/03/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E7%94%9F%E6%80%81%E5%90%84%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/2.%E5%BE%AE%E4%BF%A1SaaS%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>即微信环境第三方代开发类型小程序</p>
</blockquote>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>为什么会有这个模式的小程序？</p>
<p>SaaS，大家都知道，主要是搭建一个公共平台，然后使用方买来直接使用，不需要开发、不需要自己维护，拎包入住，花钱省力。</p>
<p>那么对于小程序端，也就会有这样的需求了。SaaS提供方负责开发维护小程序，支持各种类型的使用方需求；而SaaS使用方则只需要购买小程序，填充自己的内容，直接使用就可以了！</p>
<p>在微信这里，SaaS提供方称为 “<a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Third_party_platform_appid.html" target="_blank" rel="noopener">第三方平台</a>”，以下简称“第三方”；</p>
<p>由第三方托管的小程序，称为“第三方代开发小程序”，以下简称“SaaS小程序”；</p>
<p>第三方在开发阶段，需要有一个“模板小程序”，完成模板开发后，再将模板部署到使用方小程序。</p>
<h2 id="二、准备阶段"><a href="#二、准备阶段" class="headerlink" title="二、准备阶段"></a>二、准备阶段</h2><h3 id="申请平台"><a href="#申请平台" class="headerlink" title="申请平台"></a>申请平台</h3><p>这里需要先熟悉两个平台：</p>
<ul>
<li>微信开放平台，是移动应用、微信公众号、小程序、第三方平台等的管理平台。</li>
<li>第三方平台，就是来管理SaaS小程序的平台。</li>
</ul>
<p>创建这两个账号的方法可以直接看 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/how_to_apply.html" target="_blank" rel="noopener">这里</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615020113548-239cfa5f-eeda-4c7f-ba43-d94f75abb56f.png" alt="第三方平台.png"></p>
<h3 id="申请模板小程序"><a href="#申请模板小程序" class="headerlink" title="申请模板小程序"></a>申请模板小程序</h3><p>刚刚已提到，SaaS小程序的开发，需要由第三方创建一个小程序作为“模板”，开发完成之后，会将这个模板部署到旗下的小程序。</p>
<p>申请小程序的方法，同 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">普通微信小程序</a>。</p>
<h3 id="绑定模板小程序"><a href="#绑定模板小程序" class="headerlink" title="绑定模板小程序"></a>绑定模板小程序</h3><p>模板小程序申请好之后，需要在“微信开放平台 - 第三方平台”绑定该小程序，这样，这个小程序才能真正成为“模板”。</p>
<blockquote>
<p>这里要注意：模板小程序被绑定后，该小程序的开发权限就已授权给第三方平台，比如开发域名配置、类目设置等等，第三方平台在发布时会覆盖小程序原有的配置。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615020769440-86e0880b-0f44-4335-9182-8e07c7730ce0.png" alt="绑定小程序.png"></p>
<h2 id="三、开发阶段"><a href="#三、开发阶段" class="headerlink" title="三、开发阶段"></a>三、开发阶段</h2><blockquote>
<p>这里的开发，就特指模板小程序的开发了！</p>
</blockquote>
<h3 id="创建小程序项目"><a href="#创建小程序项目" class="headerlink" title="创建小程序项目"></a>创建小程序项目</h3><p>创建方法和普通微信小程序相同，在开发者工具填入AppID即可（这里的AppID，就是模板小程序的AppID）。</p>
<p>创建成功之后，就可以在 “开发者工具 - 详情 - 基本信息” 中看到该小程序所在的平台名。</p>
<blockquote>
<p>这里注意：模板小程序一定要成功绑定到第三方平台才可，否则创建项目之后看不到平台信息。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615021128797-0282eb9d-07a9-49d2-8c7f-dd97d4e644bd.png" alt="绑定成功.png"></p>
<h3 id="ext-json"><a href="#ext-json" class="headerlink" title="ext.json"></a>ext.json</h3><p>细心的同学可能已经发现了，当我们创建好模板小程序项目后，相比于普通微信小程序，根目录下多了一个 <code>ext.json</code> 文件，而且和 <code>app.json</code> 文件特别相似。</p>
<h5 id="为什么会有-ext-json-？"><a href="#为什么会有-ext-json-？" class="headerlink" title="为什么会有 ext.json ？"></a>为什么会有 <code>ext.json</code> ？</h5><p>我们先来思考两个问题，当使用方小程序授权到第三方平台后，开发权限就交给了第三方。那：</p>
<ul>
<li>使用方小程序运行遇到了问题，而第三方又没有开发者权限，该如何模拟联调？</li>
<li>使用方小程序需要自定义配置，比如想自定义设置窗口样式、Tabbar等，怎么办？</li>
</ul>
<p>为解决以上问题，就引入了 <code>ext.json</code> （ext：external 外部的）配置文件：</p>
<ul>
<li>通过 <code>extAppid</code>，第三方可以在开发者工具切换成使用方小程序。</li>
<li>在第三方平台帮助使用方小程序提交审核时，微信服务端会将 <code>ext.json</code> 覆盖 <code>app.json</code> 中的对应配置，这样模板配置就可以同步到使用方小程序；同时，第三方平台在提交使用方小程序时，也可以自定义设置一个 <code>ext_json</code> 字段 ，这个字段的数据格式与前端的 <code>ext.json</code> 文件完全相同，修改配置后同样会覆盖 <code>app.json</code>，这样就可以实现使用方的自定义需求了。</li>
</ul>
<h5 id="如何配置-ext-json-？"><a href="#如何配置-ext-json-？" class="headerlink" title="如何配置 ext.json ？"></a>如何配置 <code>ext.json</code> ？</h5><p>1、特有的配置，重点关注：</p>
<ul>
<li><code>extEnable</code>：指定 <code>ext.json</code> 是否生效。打开时，将从 <code>ext.json</code> 加载配置，<code>app.json</code> 不再生效；如果关闭，加载的将是 <code>app.json</code>（这也是为什么 <code>ext.json</code> 和 <code>app.json</code> 会同时存在了）</li>
</ul>
<ul>
<li><code>extAppid</code>：指的就是当前在调试的AppID，比如开发阶段，就是模板小程序；如果是调试线上问题，就可以切换成使用方对应的小程序AppID，而不需要单独设置开发者权限。</li>
</ul>
<ul>
<li><code>ext</code>：这个就是支持前端开发者自定义数据了，然后在业务逻辑中通过 <code>wx.getExtConfig</code> 获取到。</li>
</ul>
<p>2、同 <code>app.json</code> 中的配置：</p>
<ul>
<li><code>pages</code></li>
<li><code>subpackages</code></li>
<li><code>window</code></li>
<li><code>networkTimeout</code></li>
<li>等</li>
</ul>
<blockquote>
<p>由于模板小程序和大多小使用方程序都是新申请的，没有原来的配置，所以这就是为什么这两个文件内容相似度很高了~</p>
</blockquote>
<h5 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h5><ul>
<li><code>ext.json</code> 这个文件只是用于开发模板小程序、以及联调同一第三方平台下的使用方小程序，在提交审核后没有这个文件，所以这个文件的配置一定要是正确的~</li>
<li>在开发过程中，如果开启 <code>extEnable</code>，那么加载的将是 <code>ext.json</code>，修改配置需要改的是这个文件，而不是 <code>app.json</code>。尤其是变更了路由，开发者工具可能默认会修改 <code>app.json</code>，并不会修改 <code>ext.json</code>，一定记得同步！否则，上线后就会发现页面路径错误了！切记！</li>
<li>在提交微信审核时，<code>ext.json</code> 会覆盖 <code>app.json</code>，同时，第三方平台也可以通过 <code>ext_json</code> 来二次覆盖。</li>
<li>提交审核、发布后，线上小程序加载的是被更新后的 <code>app.json</code>。</li>
</ul>
<h3 id="页面开发"><a href="#页面开发" class="headerlink" title="页面开发"></a>页面开发</h3><p>在页面开发阶段，和普通小程序类似，关注业务即可。</p>
<p>但需要注意：如果修改可信域名配置，需要在“微信开发平台 - 第三方平台”来设置。微信公众平台设置的域名会在平台更新发布后被覆盖。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615022329073-d2b2de29-3eee-4210-a1ca-a500beb5b08b.png" alt="域名授权.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615022577139-67392c73-699e-4829-8256-a7bec455fd17.png" alt="域名覆盖.png"></p>
<h2 id="四、体验阶段"><a href="#四、体验阶段" class="headerlink" title="四、体验阶段"></a>四、体验阶段</h2><h3 id="开发预览"><a href="#开发预览" class="headerlink" title="开发预览"></a>开发预览</h3><p>同普通微信小程序，直接生成预览二维码，然后微信扫码验证即可。</p>
<h3 id="上传开发版到模板库"><a href="#上传开发版到模板库" class="headerlink" title="上传开发版到模板库"></a>上传开发版到模板库</h3><p>这里就有不同了~</p>
<p>由于模板小程序已被授权给第三方平台，在开发者工具“上传”代码后，会直接上传到开放平台，不会上传到公众平台。</p>
<p>上传成功之后，可以在“微信开放平台 - 管理中心 - 第三方平台 - 详情 - 开发配置 - 小程序模板库”中找到。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12735713/1615022801316-518e5e49-74d5-4295-bc6d-866865291d0e.png" alt="上传到模板库.png"></p>
<p>这里有两个概念：“草稿箱”和“模板库”，都是保存小程序版本的列表。在我们的 <code>ext.json</code> 中，有个 <code>Boolean</code> 类型的 <code>directCommit</code> 字段，指是否直接上传到审核列表中。当设置为 <code>false</code> 时，会先上传到草稿箱，然后可以手动添加到模板库；为 <code>true</code> 时会直接上传到模板库。</p>
<p>那么，这里的模板可以做什么用？</p>
<p>我们每次在开发者工具上传一份代码时，都会保存到微信服务器。如果是模板小程序，则会同时找到对应的第三方平台，然后生成一条记录（同一个用户的会更新覆盖）。当我们从草稿箱添加到模板库时，就会创建一个模板 <code>templateID</code> 。那么，这个模板，其实就是一个版本了，只是都处于待审核阶段。</p>
<p>微信为第三方平台开放了很多api来管理这些模板，那么，第三方就可以根据使用方的需求，选择一个指定的模板部署到使用方小程序。</p>
<h3 id="上传模板小程序代码"><a href="#上传模板小程序代码" class="headerlink" title="上传模板小程序代码"></a>上传模板小程序代码</h3><blockquote>
<p>其实，当上传代码到模板库之后，前端有权能做的事情，基本就结束了。接下来的操作，就需要服务端来调用微信接口了。</p>
</blockquote>
<p>模板小程序除了模板的作用外，也还是小程序，因此同样可以上传代码到微信服务器、配置体验版、提交审核，发布之后同样可以在微信环境中运行。</p>
<p>如果希望体验模板小程序，则需要先上传该模板小程序代码到微信服务器。具体操作：</p>
<ul>
<li>获取模板库中最新的模板id，或者获取想要上传的模板id</li>
<li>设置自定义 <code>app_json</code>，注意：<code>ext.json</code> 即将覆盖 <code>app.json</code>，如果有自定义设置项，还需要使用 <code>app_json</code> 来更新！具体会如何覆盖可以看 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/commit.html" target="_blank" rel="noopener">这里</a></li>
<li>确认无误后，调用接口，上传小程序代码即可</li>
</ul>
<h3 id="配置模板小程序体验版"><a href="#配置模板小程序体验版" class="headerlink" title="配置模板小程序体验版"></a>配置模板小程序体验版</h3><p>当模板小程序代码已经上传后，就可以 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/get_qrcode.html" target="_blank" rel="noopener">获取体验版二维码</a> 来验收~</p>
<h2 id="五、发布阶段"><a href="#五、发布阶段" class="headerlink" title="五、发布阶段"></a>五、发布阶段</h2><h3 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h3><p>模板小程序的审核，需要调用对应的 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/submit_audit.html" target="_blank" rel="noopener">提交审核</a> 接口，同时可以查询审核进度、撤销审核等。</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>调用 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/release.html" target="_blank" rel="noopener">发布</a> 接口，即可以发布最后一个审核通过的小程序版本（注意不一定是最新，而是最后一个通过的版本）。</p>
<p>然后，在微信中验证下吧~</p>
<hr>
<p>以上，我们就完成了整个模板小程序的开发、体验、提审、发布流程。</p>
<p>但，我们是否忽略了一个最核心的点：我们开发模板小程序，是为了给使用方小程序部署，而不是只看模板小程序。那，使用方的小程序怎么办？</p>
<h2 id="六、使用方小程序管理"><a href="#六、使用方小程序管理" class="headerlink" title="六、使用方小程序管理"></a>六、使用方小程序管理</h2><p>我们先来梳理下思路：</p>
<ul>
<li>第三方的开发、体验过程，需要用模板小程序来创建出一个可部署的“模板”；</li>
<li>如果有使用方想要用这个“模板”，并且希望是自己的小程序，那就得到微信公众平台新申请一个；</li>
<li>有了小程序之后，就得托管（授权）给第三方平台；</li>
<li>托管成功之后，第三方需要匹配一个合适的模板，并且根据用户需求设置自定义 <code>ext_json</code> 字段；</li>
<li>设置成功后，第三方就可以通过微信提供的api将模板 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/commit.html" target="_blank" rel="noopener">上传</a> 到客户小程序；</li>
<li>之后，第三方就可以 <a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/submit_audit.html" target="_blank" rel="noopener">提交审核</a>、<a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Mini_Programs/code/release.html" target="_blank" rel="noopener">发布</a>，最终完成使用方小程序的上线！</li>
</ul>
<p>在这个过程中，使用方需要托管（授权）给第三方。</p>
<p>这样，第三方才有权限为使用方选择小程序模板、获取体验版、提审、发布；另外，除了代码管理，还可以设置基础信息、类目管理、成员管理等。</p>
<p>以上，就可以实现一整套的SaaS小程序管理流程~</p>
<blockquote>
<p>建议：最好通过可视化平台来管理，方便查看及操作，减少出错率，而且通过角色权限管理可以更安全。</p>
</blockquote>
<h2 id="七、流程总结"><a href="#七、流程总结" class="headerlink" title="七、流程总结"></a>七、流程总结</h2><ul>
<li>模板小程序实现<ul>
<li>第三方申请微信开放平台</li>
<li>第三方申请第三方平台</li>
<li>第三方申请模板小程序</li>
<li>模板小程序绑定到第三方平台</li>
<li>第三方完成模板小程序开发，注意 <code>ext.json</code></li>
<li>微信扫码预览</li>
<li>提交代码到草稿箱</li>
<li>添加草稿箱到模板库</li>
<li>选择一个模板提交模板小程序审核</li>
<li>审核通过，发布，微信环境访问</li>
</ul>
</li>
<li>客户小程序部署<ul>
<li>客户申请小程序</li>
<li>客户授权小程序到第三方平台</li>
<li>第三方选择一个模板、自定义用户配置</li>
<li>第三方上传客户小程序代码</li>
<li>第三方提交客户小程序审核</li>
<li>审核通过后，第三方发布小程序</li>
<li>客户微信环境验收</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
